<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Puzzles.Onet.Analytics</name>
    </assembly>
    <members>
        <member name="T:Puzzles.Onet.Analytics.AnalysisResult">
            <summary>
            Represents a type that stores the result of a analysis operation.
            </summary>
            <param name="grid">Indicates the base grid.</param>
        </member>
        <member name="M:Puzzles.Onet.Analytics.AnalysisResult.#ctor(Puzzles.Onet.Concepts.Grid)">
            <summary>
            Represents a type that stores the result of a analysis operation.
            </summary>
            <param name="grid">Indicates the base grid.</param>
        </member>
        <member name="P:Puzzles.Onet.Analytics.AnalysisResult.IsSolved">
            <summary>
            Indicates whether the puzzle is fully solved.
            </summary>
        </member>
        <member name="P:Puzzles.Onet.Analytics.AnalysisResult.TotalDifficulty">
            <summary>
            Indicates the total difficulty.
            </summary>
        </member>
        <member name="P:Puzzles.Onet.Analytics.AnalysisResult.MaxDifficulty">
            <summary>
            Indicates the maxinum difficulty.
            </summary>
        </member>
        <member name="P:Puzzles.Onet.Analytics.AnalysisResult.FailedReason">
            <summary>
            Indicates the failed reason.
            </summary>
        </member>
        <member name="P:Puzzles.Onet.Analytics.AnalysisResult.Matches">
            <summary>
            Indicates the matches found during the analysis.
            </summary>
        </member>
        <member name="P:Puzzles.Onet.Analytics.AnalysisResult.Grids">
            <summary>
            Indicates the grids applied in each step in solving procedure.
            </summary>
        </member>
        <member name="P:Puzzles.Onet.Analytics.AnalysisResult.ElapsedTime">
            <summary>
            Indicates the elapsed time.
            </summary>
        </member>
        <member name="P:Puzzles.Onet.Analytics.AnalysisResult.UnhandledException">
            <summary>
            Indicates the exception encountered.
            </summary>
        </member>
        <member name="P:Puzzles.Onet.Analytics.AnalysisResult.InterimMatches">
            <summary>
            Indicates the matches.
            </summary>
        </member>
        <member name="P:Puzzles.Onet.Analytics.AnalysisResult.InterimGrids">
            <summary>
            Indicates the interim grids.
            </summary>
        </member>
        <member name="M:Puzzles.Onet.Analytics.AnalysisResult.ToString">
            <inheritdoc/>
        </member>
        <member name="M:Puzzles.Onet.Analytics.AnalysisResult.GetEnumerator">
            <inheritdoc cref="M:System.Collections.Generic.IEnumerable`1.GetEnumerator"/>
        </member>
        <member name="M:Puzzles.Onet.Analytics.AnalysisResult.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:Puzzles.Onet.Analytics.AnalysisResult.System#Collections#Generic#IEnumerable{Puzzles#Onet#Concepts#ItemMatch}#GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="P:Puzzles.Onet.Analytics.AnalysisResult.Grid">
            <summary>
            The generated property declaration for parameter <c>grid</c>.
            </summary>
        </member>
        <member name="M:Puzzles.Onet.Analytics.AnalysisResult.Equals(System.Object)">
            <inheritdoc cref="M:System.Object.Equals(System.Object)"/>
        </member>
        <member name="M:Puzzles.Onet.Analytics.AnalysisResult.GetHashCode">
            <inheritdoc cref="M:System.Object.GetHashCode"/>
        </member>
        <member name="M:Puzzles.Onet.Analytics.AnalysisResult.op_Equality(Puzzles.Onet.Analytics.AnalysisResult,Puzzles.Onet.Analytics.AnalysisResult)">
            <inheritdoc cref="M:System.Numerics.IEqualityOperators`3.op_Equality(`0,`1)"/>
        </member>
        <member name="M:Puzzles.Onet.Analytics.AnalysisResult.op_Inequality(Puzzles.Onet.Analytics.AnalysisResult,Puzzles.Onet.Analytics.AnalysisResult)">
            <inheritdoc cref="M:System.Numerics.IEqualityOperators`3.op_Inequality(`0,`1)"/>
        </member>
        <member name="M:Puzzles.Onet.Analytics.AnalysisResult.Equals(Puzzles.Onet.Analytics.AnalysisResult)">
            <inheritdoc/>
        </member>
        <member name="T:Puzzles.Onet.Analytics.Analyzer">
            <summary>
            Represents an analyzer object that can analyze a match puzzle.
            </summary>
        </member>
        <member name="F:Puzzles.Onet.Analytics.Analyzer._collector">
            <summary>
            Indicates the backing collector.
            </summary>
        </member>
        <member name="F:Puzzles.Onet.Analytics.Analyzer._rng">
            <summary>
            Indicates the backing random number generator.
            </summary>
        </member>
        <member name="P:Puzzles.Onet.Analytics.Analyzer.RandomSelectSteps">
            <summary>
            Indicates whether the analyzer will randomly select steps to be applied.
            </summary>
        </member>
        <member name="M:Puzzles.Onet.Analytics.Analyzer.Analyze(Puzzles.Onet.Concepts.Grid,System.Threading.CancellationToken)">
            <summary>
            Try to analyze a puzzle, and return the steps found, encapsulated by <see cref="T:Puzzles.Onet.Analytics.AnalysisResult"/>.
            </summary>
            <param name="grid">The grid to be analyzed.</param>
            <param name="cancellationToken">Indicates the cancellation token that can cancel the current operation.</param>
            <returns>An instance of type <see cref="T:Puzzles.Onet.Analytics.AnalysisResult"/> indicating the result information.</returns>
        </member>
        <member name="T:Puzzles.Onet.Analytics.BruteForce">
            <summary>
            Provides a way to enumerate all possible cases of matching.
            </summary>
        </member>
        <member name="F:Puzzles.Onet.Analytics.BruteForce._collector">
            <summary>
            Indicates the backing collector.
            </summary>
        </member>
        <member name="M:Puzzles.Onet.Analytics.BruteForce.CreateTree(Puzzles.Onet.Concepts.Grid)">
            <inheritdoc cref="M:Puzzles.Onet.Analytics.BruteForce.CreateTree(Puzzles.Onet.Concepts.Grid,System.Collections.Generic.LinkedList{Puzzles.Onet.Analytics.InvertedBruteForceNode}@)"/>
        </member>
        <member name="M:Puzzles.Onet.Analytics.BruteForce.CreateTree(Puzzles.Onet.Concepts.Grid,System.Collections.Generic.LinkedList{Puzzles.Onet.Analytics.InvertedBruteForceNode}@)">
            <summary>
            Create a <see cref="T:Puzzles.Onet.Analytics.BruteForceTree"/> to describe each steps and its related steps.
            </summary>
            <param name="puzzle">The puzzle.</param>
            <param name="invertedNodes">The inverted nodes.</param>
            <returns>A <see cref="T:Puzzles.Onet.Analytics.BruteForceTree"/> instance.</returns>
        </member>
        <member name="T:Puzzles.Onet.Analytics.BruteForceNode">
            <summary>
            Represents a brute force node that describes the current state, and its children states.
            </summary>
            <param name="step">Indicates the step.</param>
            <param name="currentState">Indicates the current state.</param>
        </member>
        <member name="M:Puzzles.Onet.Analytics.BruteForceNode.#ctor(Puzzles.Onet.Concepts.ItemMatch,Puzzles.Onet.Concepts.Grid)">
            <summary>
            Represents a brute force node that describes the current state, and its children states.
            </summary>
            <param name="step">Indicates the step.</param>
            <param name="currentState">Indicates the current state.</param>
        </member>
        <member name="P:Puzzles.Onet.Analytics.BruteForceNode.Children">
            <summary>
            Indicates the children.
            </summary>
        </member>
        <member name="P:Puzzles.Onet.Analytics.BruteForceNode.Step">
            <summary>
            The generated property declaration for parameter <c>step</c>.
            </summary>
        </member>
        <member name="P:Puzzles.Onet.Analytics.BruteForceNode.CurrentState">
            <summary>
            The generated property declaration for parameter <c>currentState</c>.
            </summary>
        </member>
        <member name="M:Puzzles.Onet.Analytics.BruteForceNode.Equals(System.Object)">
            <inheritdoc cref="M:System.Object.Equals(System.Object)"/>
        </member>
        <member name="M:Puzzles.Onet.Analytics.BruteForceNode.GetHashCode">
            <inheritdoc cref="M:System.Object.GetHashCode"/>
        </member>
        <member name="M:Puzzles.Onet.Analytics.BruteForceNode.ToString">
            <inheritdoc cref="M:System.Object.ToString"/>
        </member>
        <member name="M:Puzzles.Onet.Analytics.BruteForceNode.op_Equality(Puzzles.Onet.Analytics.BruteForceNode,Puzzles.Onet.Analytics.BruteForceNode)">
            <inheritdoc cref="M:System.Numerics.IEqualityOperators`3.op_Equality(`0,`1)"/>
        </member>
        <member name="M:Puzzles.Onet.Analytics.BruteForceNode.op_Inequality(Puzzles.Onet.Analytics.BruteForceNode,Puzzles.Onet.Analytics.BruteForceNode)">
            <inheritdoc cref="M:System.Numerics.IEqualityOperators`3.op_Inequality(`0,`1)"/>
        </member>
        <member name="M:Puzzles.Onet.Analytics.BruteForceNode.Equals(Puzzles.Onet.Analytics.BruteForceNode)">
            <inheritdoc/>
        </member>
        <member name="T:Puzzles.Onet.Analytics.BruteForceTree">
            <summary>
            Represents a tree that describes all branches of trial of a puzzle.
            </summary>
            <param name="rootNode">Indicates the root node.</param>
        </member>
        <member name="M:Puzzles.Onet.Analytics.BruteForceTree.#ctor(Puzzles.Onet.Analytics.BruteForceNode)">
            <summary>
            Represents a tree that describes all branches of trial of a puzzle.
            </summary>
            <param name="rootNode">Indicates the root node.</param>
        </member>
        <member name="P:Puzzles.Onet.Analytics.BruteForceTree.Puzzle">
            <summary>
            Indicates the puzzle.
            </summary>
        </member>
        <member name="P:Puzzles.Onet.Analytics.BruteForceTree.Puzzles#Meta#DataStructures#IDataStructure#Type">
            <inheritdoc/>
        </member>
        <member name="P:Puzzles.Onet.Analytics.BruteForceTree.Puzzles#Meta#DataStructures#IDataStructure#Base">
            <inheritdoc/>
        </member>
        <member name="M:Puzzles.Onet.Analytics.BruteForceTree.Contains(Puzzles.Onet.Analytics.BruteForceNode)">
            <summary>
            Determine whether the tree contains the specified node.
            </summary>
            <param name="node">The node to be checked.</param>
            <returns>A <see cref="T:System.Boolean"/> result.</returns>
        </member>
        <member name="M:Puzzles.Onet.Analytics.BruteForceTree.Equals(Puzzles.Onet.Analytics.BruteForceTree)">
            <inheritdoc/>
        </member>
        <member name="M:Puzzles.Onet.Analytics.BruteForceTree.GetNodesCount">
            <summary>
            Returns the number of nodes used.
            </summary>
            <returns>The number of nodes.</returns>
        </member>
        <member name="M:Puzzles.Onet.Analytics.BruteForceTree.GetMaximumDepth">
            <summary>
            Returns the maximum depth of the puzzle.
            </summary>
            <returns>The maximum depth of the puzzle.</returns>
            <seealso href="https://leetcode.cn/problems/maximum-depth-of-n-ary-tree/">LeetCode - Maximum depth of a n-ary tree</seealso>
        </member>
        <member name="M:Puzzles.Onet.Analytics.BruteForceTree.GetSuccessRate">
            <summary>
            Returns the success rate of the puzzle.
            </summary>
            <returns>Success rate.</returns>
        </member>
        <member name="M:Puzzles.Onet.Analytics.BruteForceTree.GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:Puzzles.Onet.Analytics.BruteForceTree.DescendantNodes(Puzzles.Onet.Analytics.BruteForceNode)">
            <summary>
            Enumerates all nodes that belongs to the current node.
            </summary>
            <param name="node">The node.</param>
            <returns>The descendant nodes.</returns>
            <exception cref="T:System.InvalidOperationException">Throws when the current node is not inside the current tree.</exception>
        </member>
        <member name="M:Puzzles.Onet.Analytics.BruteForceTree.DescendantNodesAndSelf(Puzzles.Onet.Analytics.BruteForceNode)">
            <summary>
            Enumerates all nodes that belongs to the current node, and itself.
            </summary>
            <param name="node">The node.</param>
            <returns>The descendant nodes and itself.</returns>
            <exception cref="T:System.InvalidOperationException">Throws when the current node is not inside the current tree.</exception>
        </member>
        <member name="M:Puzzles.Onet.Analytics.BruteForceTree.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:Puzzles.Onet.Analytics.BruteForceTree.GetLeafNodes">
            <summary>
            Try to get all leaf nodes.
            </summary>
            <returns>The leaf nodes.</returns>
        </member>
        <member name="M:Puzzles.Onet.Analytics.BruteForceTree.GetDescendantNodes(Puzzles.Onet.Analytics.BruteForceNode,System.Boolean)">
            <summary>
            Try to iterate all nodes and its descendant nodes.
            </summary>
            <param name="node">The node.</param>
            <param name="yieldSelf">Indicates whether the node itself can be produced as a part of result.</param>
            <returns>A list of nodes.</returns>
            <exception cref="T:System.InvalidOperationException">Throws when the node is not inside the current tree.</exception>
        </member>
        <member name="P:Puzzles.Onet.Analytics.BruteForceTree.RootNode">
            <summary>
            The generated property declaration for parameter <c>rootNode</c>.
            </summary>
        </member>
        <member name="M:Puzzles.Onet.Analytics.BruteForceTree.Equals(System.Object)">
            <inheritdoc cref="M:System.Object.Equals(System.Object)"/>
        </member>
        <member name="M:Puzzles.Onet.Analytics.BruteForceTree.GetHashCode">
            <inheritdoc cref="M:System.Object.GetHashCode"/>
        </member>
        <member name="M:Puzzles.Onet.Analytics.BruteForceTree.op_Equality(Puzzles.Onet.Analytics.BruteForceTree,Puzzles.Onet.Analytics.BruteForceTree)">
            <inheritdoc cref="M:System.Numerics.IEqualityOperators`3.op_Equality(`0,`1)"/>
        </member>
        <member name="M:Puzzles.Onet.Analytics.BruteForceTree.op_Inequality(Puzzles.Onet.Analytics.BruteForceTree,Puzzles.Onet.Analytics.BruteForceTree)">
            <inheritdoc cref="M:System.Numerics.IEqualityOperators`3.op_Inequality(`0,`1)"/>
        </member>
        <member name="T:Puzzles.Onet.Analytics.Collector">
            <summary>
            Provides with a collector object.
            </summary>
        </member>
        <member name="M:Puzzles.Onet.Analytics.Collector.Collect(Puzzles.Onet.Concepts.Grid)">
            <summary>
            Try to find all possible steps appeared in the grid; if no steps found, an empty array will be returned.
            </summary>
            <param name="grid">The grid.</param>
            <returns>All matched items.</returns>
        </member>
        <member name="M:Puzzles.Onet.Analytics.Collector.IsCoordinateOutOfBound(Puzzles.Onet.Concepts.Grid,Puzzles.Concepts.Coordinate)">
            <summary>
            Determine whether the current coordinate is out of bound.
            </summary>
            <param name="grid">The grid.</param>
            <param name="coordinate">The coordinate.</param>
            <returns>A <see cref="T:System.Boolean"/> result.</returns>
        </member>
        <member name="M:Puzzles.Onet.Analytics.Collector.TryPair(Puzzles.Onet.Concepts.Grid,Puzzles.Concepts.Coordinate,Puzzles.Concepts.Coordinate,Puzzles.Onet.Concepts.ItemMatch@)">
            <summary>
            Determine whether two values are paired under the matching rule;
            if so, return <see langword="true"/> and return an <see cref="T:Puzzles.Onet.Concepts.ItemMatch"/> object
            to parameter <paramref name="result"/> indicating the result details.
            </summary>
            <param name="grid">The grid.</param>
            <param name="coordinate1">Indicates the first coordinate.</param>
            <param name="coordinate2">Indicates the second coordinate.</param>
            <param name="result">Indicates the result match.</param>
            <returns>A <see cref="T:System.Boolean"/> result indicating that.</returns>
            <exception cref="T:System.InvalidOperationException">Throws when the grid is too small (lower than 2x2).</exception>
        </member>
        <member name="M:Puzzles.Onet.Analytics.Collector.IsSameRowPaired(Puzzles.Onet.Concepts.Grid,Puzzles.Concepts.Coordinate,Puzzles.Concepts.Coordinate)">
            <summary>
            Determine whether two coordinates is in same row, and can be paired.
            </summary>
            <param name="grid">The grid.</param>
            <param name="coordinate1">Indicates the first coordinate.</param>
            <param name="coordinate2">Indicates the second coordinate.</param>
            <returns>A <see cref="T:System.Boolean"/> result indicating that.</returns>
        </member>
        <member name="M:Puzzles.Onet.Analytics.Collector.IsSameColumnPaired(Puzzles.Onet.Concepts.Grid,Puzzles.Concepts.Coordinate,Puzzles.Concepts.Coordinate)">
            <summary>
            Determine whether two coordinates is in same column, and can be paired.
            </summary>
            <param name="grid">The grid.</param>
            <param name="coordinate1">Indicates the first coordinate.</param>
            <param name="coordinate2">Indicates the second coordinate.</param>
            <returns>A <see cref="T:System.Boolean"/> result indicating that.</returns>
        </member>
        <member name="M:Puzzles.Onet.Analytics.Collector.IsTurningOncePaired(Puzzles.Onet.Concepts.Grid,Puzzles.Concepts.Coordinate,Puzzles.Concepts.Coordinate,Puzzles.Concepts.Coordinate@)">
            <summary>
            Determine whether two coordinates can be paired with one-time turning.
            </summary>
            <param name="grid">The grid.</param>
            <param name="coordinate1">Indicates the first coordinate.</param>
            <param name="coordinate2">Indicates the second coordinate.</param>
            <param name="interim">Indicates the interim on turning.</param>
            <returns>A <see cref="T:System.Boolean"/> result indicating that.</returns>
        </member>
        <member name="M:Puzzles.Onet.Analytics.Collector.IsTurningTwicePaired(Puzzles.Onet.Concepts.Grid,Puzzles.Concepts.Coordinate,Puzzles.Concepts.Coordinate,Puzzles.Concepts.Coordinate[]@)">
            <summary>
            Determine whether two coordinates can be paired with two-time turning.
            </summary>
            <param name="grid">The grid.</param>
            <param name="coordinate1">Indicates the first coordinate.</param>
            <param name="coordinate2">Indicates the second coordinate.</param>
            <param name="interims">Indicates the interim coordinates on turning.</param>
            <returns>A <see cref="T:System.Boolean"/> result indicating that.</returns>
        </member>
        <member name="M:Puzzles.Onet.Analytics.Collector.Blocks(Puzzles.Onet.Concepts.Grid,System.Int32,System.Int32)">
            <summary>
            Determine whether the grid has blocked the specified coordinate.
            </summary>
            <param name="grid">The grid.</param>
            <param name="x">The row index.</param>
            <param name="y">The column index.</param>
            <returns>A <see cref="T:System.Boolean"/> result indicating that.</returns>
        </member>
        <member name="M:Puzzles.Onet.Analytics.Collector.Blocks(Puzzles.Onet.Concepts.Grid,Puzzles.Concepts.Coordinate)">
            <summary>
            Determine whether the grid has blocked the specified coordinate.
            </summary>
            <param name="grid">The grid.</param>
            <param name="coordinate">The coordinate.</param>
            <returns>A <see cref="T:System.Boolean"/> result indicating that.</returns>
        </member>
        <member name="T:Puzzles.Onet.Analytics.FailedReason">
            <summary>
            Represents a failed reason.
            </summary>
        </member>
        <member name="F:Puzzles.Onet.Analytics.FailedReason.None">
            <summary>
            Indicates there's no failure.
            </summary>
        </member>
        <member name="F:Puzzles.Onet.Analytics.FailedReason.PuzzleInvalid">
            <summary>
            Indicates the puzzle is invalid or failed.
            </summary>
        </member>
        <member name="F:Puzzles.Onet.Analytics.FailedReason.UserCancelled">
            <summary>
            Indicates the user has cancelled the analysis.
            </summary>
        </member>
        <member name="F:Puzzles.Onet.Analytics.FailedReason.UnhandledException">
            <summary>
            Indicates an unhandled exception is thrown.
            </summary>
        </member>
        <member name="T:Puzzles.Onet.Analytics.InvertedBruteForceNode">
            <summary>
            Provides a linked list node that describes the parent usages for a step.
            </summary>
            <param name="Step">Indicates the step.</param>
            <param name="CurrentPuzzle">Indicates the current puzzle state.</param>
            <param name="Parent">Indicates the parent node.</param>
        </member>
        <member name="M:Puzzles.Onet.Analytics.InvertedBruteForceNode.#ctor(Puzzles.Onet.Concepts.ItemMatch,Puzzles.Onet.Concepts.Grid,Puzzles.Onet.Analytics.InvertedBruteForceNode)">
            <summary>
            Provides a linked list node that describes the parent usages for a step.
            </summary>
            <param name="Step">Indicates the step.</param>
            <param name="CurrentPuzzle">Indicates the current puzzle state.</param>
            <param name="Parent">Indicates the parent node.</param>
        </member>
        <member name="P:Puzzles.Onet.Analytics.InvertedBruteForceNode.Step">
            <summary>Indicates the step.</summary>
        </member>
        <member name="P:Puzzles.Onet.Analytics.InvertedBruteForceNode.CurrentPuzzle">
            <summary>Indicates the current puzzle state.</summary>
        </member>
        <member name="P:Puzzles.Onet.Analytics.InvertedBruteForceNode.Parent">
            <summary>Indicates the parent node.</summary>
        </member>
        <member name="M:Puzzles.Onet.Analytics.InvertedBruteForceNode.#ctor(Puzzles.Onet.Concepts.Grid)">
            <summary>
            Initializes a <see cref="T:Puzzles.Onet.Analytics.InvertedBruteForceNode"/> instance.
            </summary>
            <param name="currentPuzzle">Indicates the current puzzle.</param>
        </member>
        <member name="P:Puzzles.Onet.Analytics.InvertedBruteForceNode.AncestorsCount">
            <summary>
            Indicates the number of ancestors in the whole chain.
            </summary>
        </member>
        <member name="M:Puzzles.Onet.Analytics.InvertedBruteForceNode.PrintMembers(System.Text.StringBuilder)">
            <target name="method" cref="M:Puzzles.Onet.Analytics.InvertedBruteForceNode.PrintMembers(System.Text.StringBuilder)">
				<summary>
					Provides an easy way to concatenate output members inside a <see langword="record" />
					or a <see langword="record struct" /> type.
				</summary>
				<param name="builder">
					A <see cref="T:System.Text.StringBuilder" /> instance to concatenate values.
				</param>
				<returns>
					A <see cref="T:System.Boolean" /> value indicating whether the method should be consumed by compiler,
					by implementing to-string method <see cref="M:Puzzles.Onet.Analytics.InvertedBruteForceNode.ToString" />.
				</returns>
				<remarks>
					<para>
						By design of <see langword="record" /> and <see langword="record struct" /> types,
						emit text should be formatted as follows:
						<code><![CDATA[RecordType { Property1 = Value1, Property2 = Value2, Property3 = { NestedProperty = Value3 } }]]></code>
					</para>
					<para>
						This method won't emit type name and curly brackets. If you want to customize emit text,
						you can only change values inside a pair of brackets.
					</para>
					<para>
						The suggested implementation is like this:
						<code><![CDATA[private bool PrintMembers(StringBuilder builder)
{
    builder.Append($"{nameof(Property1)} = {Property1}");
    builder.Append(", ");
    builder.Append($"{nameof(Property2)} = {Property2}");
    builder.Append(", ");
    builder.Append($"{nameof(Property3)} = {{ {Property3} }}");
    return true;
}]]>
						</code>
					</para>
				</remarks>
			</target>
        </member>
        <member name="T:Puzzles.Onet.Analytics.ScoredAnalyzer">
            <summary>
            Represents an analyzer that will find a list of steps, with scoring rules that makes each step have a minimal one.
            </summary>
        </member>
        <member name="F:Puzzles.Onet.Analytics.ScoredAnalyzer._collector">
            <summary>
            Indicates the backing collector.
            </summary>
        </member>
        <member name="M:Puzzles.Onet.Analytics.ScoredAnalyzer.Analyze(Puzzles.Onet.Concepts.Grid,System.Int32,System.Boolean,System.Func{System.ValueTuple{System.Double,System.Double}},Puzzles.Onet.Measuring.DistanceType,System.Int32,System.Int32)">
            <summary>
            Try to analyze the grid.
            </summary>
            <param name="grid">The grid.</param>
            <param name="maxBranchesCount">The maximum branches count.</param>
            <param name="chooseMinimal">
            Indicates whether we should choose the minimal one in every branch. If not, the maximal one will be chosen.
            </param>
            <param name="startPointCreator">
            The start point to be checked. The default is <see langword="null"/> (un-assigned).
            It will be initialized as the center of the grid (half width and height).
            The default is <see langword="null"/>.
            </param>
            <param name="distanceType">
            Indicates the distance type to be checked. The default is <see cref="F:Puzzles.Onet.Measuring.DistanceType.Manhattan"/>.
            </param>
            <param name="distanceWeight">Indicates the distance weight. The default is 10.</param>
            <param name="visualDistanceWeight">Indicates the visual distance weight. The default is 1.</param>
            <returns>Returns an array of steps, and the internal and visual distance values.</returns>
        </member>
        <member name="T:Puzzles.Onet.Analytics.SolvingPath">
            <summary>
            Represents a solving path.
            </summary>
            <param name="lastNode">The last node.</param>
        </member>
        <member name="M:Puzzles.Onet.Analytics.SolvingPath.#ctor(Puzzles.Onet.Analytics.SolvingPathNode)">
            <summary>
            Represents a solving path.
            </summary>
            <param name="lastNode">The last node.</param>
        </member>
        <member name="P:Puzzles.Onet.Analytics.SolvingPath.TotalDifficulty">
            <summary>
            Indicates the total difficulty.
            </summary>
        </member>
        <member name="P:Puzzles.Onet.Analytics.SolvingPath.DifficultyValues">
            <summary>
            Indicates the difficulty values.
            </summary>
        </member>
        <member name="M:Puzzles.Onet.Analytics.SolvingPath.ToString">
            <inheritdoc/>
        </member>
        <member name="M:Puzzles.Onet.Analytics.SolvingPath.GetNodes(Puzzles.Onet.Analytics.SolvingPathNode)">
            <summary>
            Create a list of <see cref="T:Puzzles.Onet.Analytics.SolvingPathNode"/> instance via the last node.
            </summary>
            <param name="lastNode">The last node.</param>
            <returns>A list of nodes.</returns>
        </member>
        <member name="T:Puzzles.Onet.Analytics.SolvingPathNode">
            <summary>
            Represents a solving path node.
            </summary>
            <param name="Match">Indicates the match.</param>
            <param name="GridState">Indicates the current grid state.</param>
            <param name="Difficulty">Indicates the difficulty rating.</param>
            <param name="Parent">Indicates the parent node.</param>
        </member>
        <member name="M:Puzzles.Onet.Analytics.SolvingPathNode.#ctor(Puzzles.Onet.Concepts.ItemMatch,Puzzles.Onet.Concepts.Grid,System.Double,Puzzles.Onet.Analytics.SolvingPathNode)">
            <summary>
            Represents a solving path node.
            </summary>
            <param name="Match">Indicates the match.</param>
            <param name="GridState">Indicates the current grid state.</param>
            <param name="Difficulty">Indicates the difficulty rating.</param>
            <param name="Parent">Indicates the parent node.</param>
        </member>
        <member name="P:Puzzles.Onet.Analytics.SolvingPathNode.Match">
            <summary>Indicates the match.</summary>
        </member>
        <member name="P:Puzzles.Onet.Analytics.SolvingPathNode.GridState">
            <summary>Indicates the current grid state.</summary>
        </member>
        <member name="P:Puzzles.Onet.Analytics.SolvingPathNode.Difficulty">
            <summary>Indicates the difficulty rating.</summary>
        </member>
        <member name="P:Puzzles.Onet.Analytics.SolvingPathNode.Parent">
            <summary>Indicates the parent node.</summary>
        </member>
        <member name="M:Puzzles.Onet.Analytics.SolvingPathNode.#ctor(Puzzles.Onet.Concepts.Grid)">
            <summary>
            Initializes a <see cref="T:Puzzles.Onet.Analytics.SolvingPathNode"/> instance.
            </summary>
            <param name="gridState">The grid state.</param>
        </member>
        <member name="P:Puzzles.Onet.Analytics.SolvingPathNode.AncestorsCount">
            <summary>
            Indicates the number of ancestors.
            </summary>
        </member>
        <member name="M:Puzzles.Onet.Analytics.SolvingPathNode.Equals(Puzzles.Onet.Analytics.SolvingPathNode)">
            <inheritdoc/>
        </member>
        <member name="M:Puzzles.Onet.Analytics.SolvingPathNode.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Puzzles.Onet.Analytics.SolvingPathNode.PrintMembers(System.Text.StringBuilder)">
            <target name="method" cref="M:Puzzles.Onet.Analytics.SolvingPathNode.PrintMembers(System.Text.StringBuilder)">
				<summary>
					Provides an easy way to concatenate output members inside a <see langword="record" />
					or a <see langword="record struct" /> type.
				</summary>
				<param name="builder">
					A <see cref="T:System.Text.StringBuilder" /> instance to concatenate values.
				</param>
				<returns>
					A <see cref="T:System.Boolean" /> value indicating whether the method should be consumed by compiler,
					by implementing to-string method <see cref="M:Puzzles.Onet.Analytics.SolvingPathNode.ToString" />.
				</returns>
				<remarks>
					<para>
						By design of <see langword="record" /> and <see langword="record struct" /> types,
						emit text should be formatted as follows:
						<code><![CDATA[RecordType { Property1 = Value1, Property2 = Value2, Property3 = { NestedProperty = Value3 } }]]></code>
					</para>
					<para>
						This method won't emit type name and curly brackets. If you want to customize emit text,
						you can only change values inside a pair of brackets.
					</para>
					<para>
						The suggested implementation is like this:
						<code><![CDATA[private bool PrintMembers(StringBuilder builder)
{
    builder.Append($"{nameof(Property1)} = {Property1}");
    builder.Append(", ");
    builder.Append($"{nameof(Property2)} = {Property2}");
    builder.Append(", ");
    builder.Append($"{nameof(Property3)} = {{ {Property3} }}");
    return true;
}]]>
						</code>
					</para>
				</remarks>
			</target>
        </member>
        <member name="T:Puzzles.Onet.Generating.Generator">
            <summary>
            Represents a generator.
            </summary>
        </member>
        <member name="M:Puzzles.Onet.Generating.Generator.#ctor">
            <summary>
            Represents a generator.
            </summary>
        </member>
        <member name="F:Puzzles.Onet.Generating.Generator._collector">
            <summary>
            Indicates the collector.
            </summary>
        </member>
        <member name="F:Puzzles.Onet.Generating.Generator._rng">
            <summary>
            Indicates the local random number generator.
            </summary>
        </member>
        <member name="M:Puzzles.Onet.Generating.Generator.Generate(System.Int32,System.Int32,System.Byte,System.Threading.CancellationToken)">
            <summary>
            Generates a valid <see cref="T:Puzzles.Onet.Concepts.Grid"/> that contains at least one step to be used.
            </summary>
            <param name="rows">The desired number of rows.</param>
            <param name="columns">The desired number of columns.</param>
            <param name="itemsCount">Indicates the number of items to be used in the grid.</param>
            <param name="cancellationToken">The cancellation token that can cancel the current operation.</param>
            <returns>A <see cref="T:Puzzles.Onet.Concepts.Grid"/> result; or <see langword="null"/> if cancelled.</returns>
            <exception cref="T:System.ArgumentException">Throws when the argument is invalid.</exception>
            <exception cref="T:System.InvalidOperationException">
            Throws when the argument <paramref name="rows"/> and <paramref name="columns"/> are both odd.
            </exception>
        </member>
        <member name="M:Puzzles.Onet.Generating.Generator.Generate(System.Int32,System.Int32,System.Collections.Generic.IReadOnlyDictionary{System.Byte,System.Int32},System.Threading.CancellationToken)">
            <summary>
            Generates a valid <see cref="T:Puzzles.Onet.Concepts.Grid"/> that contains at least one step to be used;
            elements should be guaranteed to appear the specified number of times.
            </summary>
            <param name="rows">The desired number of rows.</param>
            <param name="columns">The desired number of columns.</param>
            <param name="items">Indicates items and its appearing times.</param>
            <param name="cancellationToken">The cancellation token that can cancel the current operation.</param>
            <returns>A <see cref="T:Puzzles.Onet.Concepts.Grid"/> result; or <see langword="null"/> if cancelled.</returns>
            <exception cref="T:System.ArgumentException">Throws when the argument is invalid.</exception>
        </member>
        <member name="M:Puzzles.Onet.Generating.Generator.Generate(System.Int32,System.Int32,System.Collections.Generic.IReadOnlyDictionary{System.Byte,System.ValueTuple{System.Int32,System.Int32}},System.Threading.CancellationToken)">
            <summary>
            Generates a valid <see cref="T:Puzzles.Onet.Concepts.Grid"/> that contains at least one step to be used;
            elements should be guaranteed to appear the specified number of times, in range list <paramref name="itemRanges"/>.
            </summary>
            <param name="rows">The desired number of rows.</param>
            <param name="columns">The desired number of columns.</param>
            <param name="itemRanges">Indicates items and its appearing times in range between corresponding limit.</param>
            <param name="cancellationToken">The cancellation token that can cancel the current operation.</param>
            <returns>A <see cref="T:Puzzles.Onet.Concepts.Grid"/> result; or <see langword="null"/> if cancelled.</returns>
            <exception cref="T:System.ArgumentException">Throws when the argument is invalid.</exception>
            <exception cref="T:System.InvalidOperationException">Throws when the item ranges is invalid.</exception>
        </member>
        <member name="M:Puzzles.Onet.Generating.Generator.GenerateAveraged(System.Int32,System.Int32,System.Byte,System.Threading.CancellationToken)">
            <summary>
            Generates a valid <see cref="T:Puzzles.Onet.Concepts.Grid"/> that contains at least one step to be used, with average value.
            </summary>
            <param name="rows">The desired number of rows.</param>
            <param name="columns">The desired number of columns.</param>
            <param name="itemsCount">Indicates the number of items to be used in the grid.</param>
            <param name="cancellationToken">The cancellation token that can cancel the current operation.</param>
            <returns>A <see cref="T:Puzzles.Onet.Concepts.Grid"/> result; or <see langword="null"/> if cancelled.</returns>
            <exception cref="T:System.ArgumentException">Throws when the argument is invalid.</exception>
            <exception cref="T:System.InvalidOperationException">
            Throws when the argument <paramref name="rows"/> and <paramref name="columns"/> are both odd.
            </exception>
        </member>
        <member name="M:Puzzles.Onet.Generating.Generator.BitArrayToIndices(System.Collections.BitArray,System.Int32)">
            <summary>
            Converts bit array instance into valid array of indices.
            </summary>
            <param name="bitArray">The bit array.</param>
            <param name="startIndex">The start index.</param>
            <returns>The array.</returns>
        </member>
        <member name="M:Puzzles.Onet.Generating.Generator.Equals(System.Object)">
            <inheritdoc cref="M:System.Object.Equals(System.Object)"/>
        </member>
        <member name="M:Puzzles.Onet.Generating.Generator.GetHashCode">
            <inheritdoc cref="M:System.Object.GetHashCode"/>
        </member>
        <member name="M:Puzzles.Onet.Generating.Generator.ToString">
            <inheritdoc cref="M:System.Object.ToString"/>
        </member>
        <member name="T:Puzzles.Onet.Measuring.Distance">
            <summary>
            Provides a list of methods that operate with distances.
            </summary>
        </member>
        <member name="M:Puzzles.Onet.Measuring.Distance.GetDistance(Puzzles.Onet.Concepts.ItemMatch,Puzzles.Onet.Measuring.DistanceType)">
            <summary>
            Get distance value.
            </summary>
            <param name="match">The match.</param>
            <param name="type">The type.</param>
            <returns>The distance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">The distance type.</exception>
        </member>
        <member name="M:Puzzles.Onet.Measuring.Distance.GetEuclidDistance(Puzzles.Concepts.Coordinate,Puzzles.Concepts.Coordinate)">
            <summary>
            Get Euclid distance for two <see cref="T:Puzzles.Concepts.Coordinate"/> instances.
            </summary>
            <param name="a">Indicates the first coordinate to be checked.</param>
            <param name="b">Indicates the second coordinate to be checked.</param>
            <returns>A <see cref="T:System.Double"/> result.</returns>
        </member>
        <member name="M:Puzzles.Onet.Measuring.Distance.GetManhattanDistance(Puzzles.Concepts.Coordinate,Puzzles.Concepts.Coordinate)">
            <summary>
            Get Manhattan distance for two <see cref="T:Puzzles.Concepts.Coordinate"/> instances.
            </summary>
            <param name="a">Indicates the first coordinate to be checked.</param>
            <param name="b">Indicates the second coordinate to be checked.</param>
            <returns>A <see cref="T:System.Double"/> result.</returns>
        </member>
        <member name="M:Puzzles.Onet.Measuring.Distance.GetSolvedDistance(Puzzles.Onet.Concepts.ItemMatch,System.Int32)">
            <summary>
            Get solved distance for two <see cref="T:Puzzles.Concepts.Coordinate"/> instances.
            </summary>
            <param name="match">Indicates the match to be checked.</param>
            <param name="weight">The weight value. By default the value is 3.</param>
            <returns>A <see cref="T:System.Double"/> result.</returns>
        </member>
        <member name="T:Puzzles.Onet.Measuring.DistanceType">
            <summary>
            Represents a type of distance to be measured.
            </summary>
        </member>
        <member name="F:Puzzles.Onet.Measuring.DistanceType.Euclid">
            <summary>
            Indicates Euclid distance.
            </summary>
        </member>
        <member name="F:Puzzles.Onet.Measuring.DistanceType.Manhattan">
            <summary>
            Indicates Manhattan distance.
            </summary>
        </member>
        <member name="F:Puzzles.Onet.Measuring.DistanceType.Solved">
            <summary>
            Indicates solved distance.
            </summary>
        </member>
    </members>
</doc>
