<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Puzzles.Onet.Analytics</name>
    </assembly>
    <members>
        <member name="T:Puzzles.Onet.Analytics.AnalysisResult">
            <summary>
            Represents a type that stores the result of a analysis operation.
            </summary>
            <param name="grid">Indicates the base grid.</param>
        </member>
        <member name="M:Puzzles.Onet.Analytics.AnalysisResult.#ctor(Puzzles.Onet.Concepts.Grid)">
            <summary>
            Represents a type that stores the result of a analysis operation.
            </summary>
            <param name="grid">Indicates the base grid.</param>
        </member>
        <member name="P:Puzzles.Onet.Analytics.AnalysisResult.IsSolved">
            <summary>
            Indicates whether the puzzle is fully solved.
            </summary>
        </member>
        <member name="P:Puzzles.Onet.Analytics.AnalysisResult.TotalDifficulty">
            <summary>
            Indicates the total difficulty.
            </summary>
        </member>
        <member name="P:Puzzles.Onet.Analytics.AnalysisResult.MaxDifficulty">
            <summary>
            Indicates the maxinum difficulty.
            </summary>
        </member>
        <member name="P:Puzzles.Onet.Analytics.AnalysisResult.FailedReason">
            <summary>
            Indicates the failed reason.
            </summary>
        </member>
        <member name="P:Puzzles.Onet.Analytics.AnalysisResult.Matches">
            <summary>
            Indicates the matches found during the analysis.
            </summary>
        </member>
        <member name="P:Puzzles.Onet.Analytics.AnalysisResult.Grids">
            <summary>
            Indicates the grids applied in each step in solving procedure.
            </summary>
        </member>
        <member name="P:Puzzles.Onet.Analytics.AnalysisResult.ElapsedTime">
            <summary>
            Indicates the elapsed time.
            </summary>
        </member>
        <member name="P:Puzzles.Onet.Analytics.AnalysisResult.UnhandledException">
            <summary>
            Indicates the exception encountered.
            </summary>
        </member>
        <member name="P:Puzzles.Onet.Analytics.AnalysisResult.InterimMatches">
            <summary>
            Indicates the matches.
            </summary>
        </member>
        <member name="P:Puzzles.Onet.Analytics.AnalysisResult.InterimGrids">
            <summary>
            Indicates the interim grids.
            </summary>
        </member>
        <member name="M:Puzzles.Onet.Analytics.AnalysisResult.ToString">
            <inheritdoc/>
        </member>
        <member name="M:Puzzles.Onet.Analytics.AnalysisResult.GetEnumerator">
            <inheritdoc cref="M:System.Collections.Generic.IEnumerable`1.GetEnumerator"/>
        </member>
        <member name="M:Puzzles.Onet.Analytics.AnalysisResult.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:Puzzles.Onet.Analytics.AnalysisResult.System#Collections#Generic#IEnumerable{Puzzles#Onet#Concepts#ItemMatch}#GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="P:Puzzles.Onet.Analytics.AnalysisResult.Grid">
            <summary>
            The generated property declaration for parameter <c>grid</c>.
            </summary>
        </member>
        <member name="M:Puzzles.Onet.Analytics.AnalysisResult.Equals(System.Object)">
            <inheritdoc cref="M:System.Object.Equals(System.Object)"/>
        </member>
        <member name="M:Puzzles.Onet.Analytics.AnalysisResult.GetHashCode">
            <inheritdoc cref="M:System.Object.GetHashCode"/>
        </member>
        <member name="M:Puzzles.Onet.Analytics.AnalysisResult.op_Equality(Puzzles.Onet.Analytics.AnalysisResult,Puzzles.Onet.Analytics.AnalysisResult)">
            <inheritdoc cref="M:System.Numerics.IEqualityOperators`3.op_Equality(`0,`1)"/>
        </member>
        <member name="M:Puzzles.Onet.Analytics.AnalysisResult.op_Inequality(Puzzles.Onet.Analytics.AnalysisResult,Puzzles.Onet.Analytics.AnalysisResult)">
            <inheritdoc cref="M:System.Numerics.IEqualityOperators`3.op_Inequality(`0,`1)"/>
        </member>
        <member name="M:Puzzles.Onet.Analytics.AnalysisResult.Equals(Puzzles.Onet.Analytics.AnalysisResult)">
            <inheritdoc/>
        </member>
        <member name="T:Puzzles.Onet.Analytics.Analyzer">
            <summary>
            Represents an analyzer object that can analyze a match puzzle.
            </summary>
        </member>
        <member name="F:Puzzles.Onet.Analytics.Analyzer._collector">
            <summary>
            Indicates the backing collector.
            </summary>
        </member>
        <member name="F:Puzzles.Onet.Analytics.Analyzer._rng">
            <summary>
            Indicates the backing random number generator.
            </summary>
        </member>
        <member name="P:Puzzles.Onet.Analytics.Analyzer.DistanceWeight">
            <summary>
            Indicates the distance weight.
            </summary>
        </member>
        <member name="P:Puzzles.Onet.Analytics.Analyzer.VisualDistanceWeight">
            <summary>
            Indicates the visual distance weight.
            </summary>
        </member>
        <member name="P:Puzzles.Onet.Analytics.Analyzer.TemporatureFactor">
            <summary>
            Indicates temporature factor.
            </summary>
        </member>
        <member name="P:Puzzles.Onet.Analytics.Analyzer.DistanceType">
            <summary>
            Indicates the calculating distance type.
            </summary>
        </member>
        <member name="P:Puzzles.Onet.Analytics.Analyzer.StartPointCreator">
            <summary>
            Represents a start point creator.
            </summary>
        </member>
        <member name="M:Puzzles.Onet.Analytics.Analyzer.Analyze(Puzzles.Onet.Concepts.Grid,System.Threading.CancellationToken)">
            <summary>
            Try to analyze a puzzle, and return the steps found, encapsulated by <see cref="T:Puzzles.Onet.Analytics.AnalysisResult"/>.
            </summary>
            <param name="grid">The grid to be analyzed.</param>
            <param name="cancellationToken">Indicates the cancellation token that can cancel the current operation.</param>
            <returns>An instance of type <see cref="T:Puzzles.Onet.Analytics.AnalysisResult"/> indicating the result information.</returns>
        </member>
        <member name="T:Puzzles.Onet.Analytics.Collector">
            <summary>
            Provides with a collector object.
            </summary>
        </member>
        <member name="M:Puzzles.Onet.Analytics.Collector.Collect(Puzzles.Onet.Concepts.Grid)">
            <summary>
            Try to find all possible steps appeared in the grid; if no steps found, an empty array will be returned.
            </summary>
            <param name="grid">The grid.</param>
            <returns>All matched items.</returns>
        </member>
        <member name="M:Puzzles.Onet.Analytics.Collector.IsCoordinateOutOfBound(Puzzles.Onet.Concepts.Grid,Puzzles.Concepts.Coordinate)">
            <summary>
            Determine whether the current coordinate is out of bound.
            </summary>
            <param name="grid">The grid.</param>
            <param name="coordinate">The coordinate.</param>
            <returns>A <see cref="T:System.Boolean"/> result.</returns>
        </member>
        <member name="M:Puzzles.Onet.Analytics.Collector.TryPair(Puzzles.Onet.Concepts.Grid,Puzzles.Concepts.Coordinate,Puzzles.Concepts.Coordinate,Puzzles.Onet.Concepts.ItemMatch@)">
            <summary>
            Determine whether two values are paired under the matching rule;
            if so, return <see langword="true"/> and return an <see cref="T:Puzzles.Onet.Concepts.ItemMatch"/> object
            to parameter <paramref name="result"/> indicating the result details.
            </summary>
            <param name="grid">The grid.</param>
            <param name="coordinate1">Indicates the first coordinate.</param>
            <param name="coordinate2">Indicates the second coordinate.</param>
            <param name="result">Indicates the result match.</param>
            <returns>A <see cref="T:System.Boolean"/> result indicating that.</returns>
            <exception cref="T:System.InvalidOperationException">Throws when the grid is too small (lower than 2x2).</exception>
        </member>
        <member name="M:Puzzles.Onet.Analytics.Collector.IsSameRowPaired(Puzzles.Onet.Concepts.Grid,Puzzles.Concepts.Coordinate,Puzzles.Concepts.Coordinate)">
            <summary>
            Determine whether two coordinates is in same row, and can be paired.
            </summary>
            <param name="grid">The grid.</param>
            <param name="coordinate1">Indicates the first coordinate.</param>
            <param name="coordinate2">Indicates the second coordinate.</param>
            <returns>A <see cref="T:System.Boolean"/> result indicating that.</returns>
        </member>
        <member name="M:Puzzles.Onet.Analytics.Collector.IsSameColumnPaired(Puzzles.Onet.Concepts.Grid,Puzzles.Concepts.Coordinate,Puzzles.Concepts.Coordinate)">
            <summary>
            Determine whether two coordinates is in same column, and can be paired.
            </summary>
            <param name="grid">The grid.</param>
            <param name="coordinate1">Indicates the first coordinate.</param>
            <param name="coordinate2">Indicates the second coordinate.</param>
            <returns>A <see cref="T:System.Boolean"/> result indicating that.</returns>
        </member>
        <member name="M:Puzzles.Onet.Analytics.Collector.IsTurningOncePaired(Puzzles.Onet.Concepts.Grid,Puzzles.Concepts.Coordinate,Puzzles.Concepts.Coordinate,Puzzles.Concepts.Coordinate@)">
            <summary>
            Determine whether two coordinates can be paired with one-time turning.
            </summary>
            <param name="grid">The grid.</param>
            <param name="coordinate1">Indicates the first coordinate.</param>
            <param name="coordinate2">Indicates the second coordinate.</param>
            <param name="interim">Indicates the interim on turning.</param>
            <returns>A <see cref="T:System.Boolean"/> result indicating that.</returns>
        </member>
        <member name="M:Puzzles.Onet.Analytics.Collector.IsTurningTwicePaired(Puzzles.Onet.Concepts.Grid,Puzzles.Concepts.Coordinate,Puzzles.Concepts.Coordinate,Puzzles.Concepts.Coordinate[]@)">
            <summary>
            Determine whether two coordinates can be paired with two-time turning.
            </summary>
            <param name="grid">The grid.</param>
            <param name="coordinate1">Indicates the first coordinate.</param>
            <param name="coordinate2">Indicates the second coordinate.</param>
            <param name="interims">Indicates the interim coordinates on turning.</param>
            <returns>A <see cref="T:System.Boolean"/> result indicating that.</returns>
        </member>
        <member name="M:Puzzles.Onet.Analytics.Collector.Blocks(Puzzles.Onet.Concepts.Grid,System.Int32,System.Int32)">
            <summary>
            Determine whether the grid has blocked the specified coordinate.
            </summary>
            <param name="grid">The grid.</param>
            <param name="x">The row index.</param>
            <param name="y">The column index.</param>
            <returns>A <see cref="T:System.Boolean"/> result indicating that.</returns>
        </member>
        <member name="M:Puzzles.Onet.Analytics.Collector.Blocks(Puzzles.Onet.Concepts.Grid,Puzzles.Concepts.Coordinate)">
            <summary>
            Determine whether the grid has blocked the specified coordinate.
            </summary>
            <param name="grid">The grid.</param>
            <param name="coordinate">The coordinate.</param>
            <returns>A <see cref="T:System.Boolean"/> result indicating that.</returns>
        </member>
        <member name="T:Puzzles.Onet.Analytics.FailedReason">
            <summary>
            Represents a failed reason.
            </summary>
        </member>
        <member name="F:Puzzles.Onet.Analytics.FailedReason.None">
            <summary>
            Indicates there's no failure.
            </summary>
        </member>
        <member name="F:Puzzles.Onet.Analytics.FailedReason.PuzzleInvalid">
            <summary>
            Indicates the puzzle is invalid or failed.
            </summary>
        </member>
        <member name="F:Puzzles.Onet.Analytics.FailedReason.UserCancelled">
            <summary>
            Indicates the user has cancelled the analysis.
            </summary>
        </member>
        <member name="F:Puzzles.Onet.Analytics.FailedReason.UnhandledException">
            <summary>
            Indicates an unhandled exception is thrown.
            </summary>
        </member>
        <member name="T:Puzzles.Onet.Generating.Generator">
            <summary>
            Represents a generator.
            </summary>
        </member>
        <member name="M:Puzzles.Onet.Generating.Generator.#ctor">
            <summary>
            Represents a generator.
            </summary>
        </member>
        <member name="F:Puzzles.Onet.Generating.Generator._collector">
            <summary>
            Indicates the collector.
            </summary>
        </member>
        <member name="F:Puzzles.Onet.Generating.Generator._rng">
            <summary>
            Indicates the local random number generator.
            </summary>
        </member>
        <member name="M:Puzzles.Onet.Generating.Generator.Generate(System.Int32,System.Int32,System.Byte,System.Threading.CancellationToken)">
            <summary>
            Generates a valid <see cref="T:Puzzles.Onet.Concepts.Grid"/> that contains at least one step to be used.
            </summary>
            <param name="rows">The desired number of rows.</param>
            <param name="columns">The desired number of columns.</param>
            <param name="itemsCount">Indicates the number of items to be used in the grid.</param>
            <param name="cancellationToken">The cancellation token that can cancel the current operation.</param>
            <returns>A <see cref="T:Puzzles.Onet.Concepts.Grid"/> result; or <see langword="null"/> if cancelled.</returns>
            <exception cref="T:System.ArgumentException">Throws when the argument is invalid.</exception>
            <exception cref="T:System.InvalidOperationException">
            Throws when the argument <paramref name="rows"/> and <paramref name="columns"/> are both odd.
            </exception>
        </member>
        <member name="M:Puzzles.Onet.Generating.Generator.Generate(System.Int32,System.Int32,System.Collections.Generic.IReadOnlyDictionary{System.Byte,System.Int32},System.Threading.CancellationToken)">
            <summary>
            Generates a valid <see cref="T:Puzzles.Onet.Concepts.Grid"/> that contains at least one step to be used;
            elements should be guaranteed to appear the specified number of times.
            </summary>
            <param name="rows">The desired number of rows.</param>
            <param name="columns">The desired number of columns.</param>
            <param name="items">Indicates items and its appearing times.</param>
            <param name="cancellationToken">The cancellation token that can cancel the current operation.</param>
            <returns>A <see cref="T:Puzzles.Onet.Concepts.Grid"/> result; or <see langword="null"/> if cancelled.</returns>
            <exception cref="T:System.ArgumentException">Throws when the argument is invalid.</exception>
        </member>
        <member name="M:Puzzles.Onet.Generating.Generator.Generate(System.Int32,System.Int32,System.Collections.Generic.IReadOnlyDictionary{System.Byte,System.ValueTuple{System.Int32,System.Int32}},System.Threading.CancellationToken)">
            <summary>
            Generates a valid <see cref="T:Puzzles.Onet.Concepts.Grid"/> that contains at least one step to be used;
            elements should be guaranteed to appear the specified number of times, in range list <paramref name="itemRanges"/>.
            </summary>
            <param name="rows">The desired number of rows.</param>
            <param name="columns">The desired number of columns.</param>
            <param name="itemRanges">Indicates items and its appearing times in range between corresponding limit.</param>
            <param name="cancellationToken">The cancellation token that can cancel the current operation.</param>
            <returns>A <see cref="T:Puzzles.Onet.Concepts.Grid"/> result; or <see langword="null"/> if cancelled.</returns>
            <exception cref="T:System.ArgumentException">Throws when the argument is invalid.</exception>
            <exception cref="T:System.InvalidOperationException">Throws when the item ranges is invalid.</exception>
        </member>
        <member name="M:Puzzles.Onet.Generating.Generator.GenerateAveraged(System.Int32,System.Int32,System.Byte,System.Threading.CancellationToken)">
            <summary>
            Generates a valid <see cref="T:Puzzles.Onet.Concepts.Grid"/> that contains at least one step to be used, with average value.
            </summary>
            <param name="rows">The desired number of rows.</param>
            <param name="columns">The desired number of columns.</param>
            <param name="itemsCount">Indicates the number of items to be used in the grid.</param>
            <param name="cancellationToken">The cancellation token that can cancel the current operation.</param>
            <returns>A <see cref="T:Puzzles.Onet.Concepts.Grid"/> result; or <see langword="null"/> if cancelled.</returns>
            <exception cref="T:System.ArgumentException">Throws when the argument is invalid.</exception>
            <exception cref="T:System.InvalidOperationException">
            Throws when the argument <paramref name="rows"/> and <paramref name="columns"/> are both odd.
            </exception>
        </member>
        <member name="M:Puzzles.Onet.Generating.Generator.BitArrayToIndices(System.Collections.BitArray,System.Int32)">
            <summary>
            Converts bit array instance into valid array of indices.
            </summary>
            <param name="bitArray">The bit array.</param>
            <param name="startIndex">The start index.</param>
            <returns>The array.</returns>
        </member>
        <member name="M:Puzzles.Onet.Generating.Generator.Equals(System.Object)">
            <inheritdoc cref="M:System.Object.Equals(System.Object)"/>
        </member>
        <member name="M:Puzzles.Onet.Generating.Generator.GetHashCode">
            <inheritdoc cref="M:System.Object.GetHashCode"/>
        </member>
        <member name="M:Puzzles.Onet.Generating.Generator.ToString">
            <inheritdoc cref="M:System.Object.ToString"/>
        </member>
        <member name="T:Puzzles.Onet.Measuring.Distance">
            <summary>
            Provides a list of methods that operate with distances.
            </summary>
        </member>
        <member name="M:Puzzles.Onet.Measuring.Distance.GetDistance(Puzzles.Onet.Concepts.ItemMatch,Puzzles.Measuring.DistanceType)">
            <summary>
            Get distance value.
            </summary>
            <param name="match">The match.</param>
            <param name="type">The type.</param>
            <returns>The distance.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">The distance type.</exception>
        </member>
        <member name="M:Puzzles.Onet.Measuring.Distance.GetEuclidDistance(Puzzles.Concepts.Coordinate,Puzzles.Concepts.Coordinate)">
            <summary>
            Get Euclid distance for two <see cref="T:Puzzles.Concepts.Coordinate"/> instances.
            </summary>
            <param name="a">Indicates the first coordinate to be checked.</param>
            <param name="b">Indicates the second coordinate to be checked.</param>
            <returns>A <see cref="T:System.Double"/> result.</returns>
        </member>
        <member name="M:Puzzles.Onet.Measuring.Distance.GetManhattanDistance(Puzzles.Concepts.Coordinate,Puzzles.Concepts.Coordinate)">
            <summary>
            Get Manhattan distance for two <see cref="T:Puzzles.Concepts.Coordinate"/> instances.
            </summary>
            <param name="a">Indicates the first coordinate to be checked.</param>
            <param name="b">Indicates the second coordinate to be checked.</param>
            <returns>A <see cref="T:System.Double"/> result.</returns>
        </member>
        <member name="M:Puzzles.Onet.Measuring.Distance.GetSolvedDistance(Puzzles.Onet.Concepts.ItemMatch,System.Int32)">
            <summary>
            Get solved distance for two <see cref="T:Puzzles.Concepts.Coordinate"/> instances.
            </summary>
            <param name="match">Indicates the match to be checked.</param>
            <param name="weight">The weight value. By default the value is 3.</param>
            <returns>A <see cref="T:System.Double"/> result.</returns>
        </member>
    </members>
</doc>
