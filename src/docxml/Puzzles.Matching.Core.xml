<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Puzzles.Matching.Core</name>
    </assembly>
    <members>
        <member name="T:Puzzles.Matching.Concepts.Coordinate">
            <summary>
            Represents a coordinate.
            </summary>
            <param name="X">Indicates the row index.</param>
            <param name="Y">Indicates the column index.</param>
        </member>
        <member name="M:Puzzles.Matching.Concepts.Coordinate.#ctor(System.Int32,System.Int32)">
            <summary>
            Represents a coordinate.
            </summary>
            <param name="X">Indicates the row index.</param>
            <param name="Y">Indicates the column index.</param>
        </member>
        <member name="P:Puzzles.Matching.Concepts.Coordinate.X">
            <summary>Indicates the row index.</summary>
        </member>
        <member name="P:Puzzles.Matching.Concepts.Coordinate.Y">
            <summary>Indicates the column index.</summary>
        </member>
        <member name="T:Puzzles.Matching.Concepts.Grid">
            <summary>
            Represents a grid of match.
            </summary>
            <remarks>
            The grid will use an array of <see cref="T:System.Byte"/> values to describe internal items.
            Different elements will be represented as its <see cref="T:System.Byte"/> value.
            Using 255 (i.e. <see cref="F:System.Byte.MaxValue"/> to describe an empty cell).
            </remarks>
        </member>
        <member name="F:Puzzles.Matching.Concepts.Grid.EmptyKey">
            <summary>
            Indicates the empty cell value.
            </summary>
        </member>
        <member name="F:Puzzles.Matching.Concepts.Grid._array">
            <summary>
            Indicates the backing grid.
            </summary>
        </member>
        <member name="M:Puzzles.Matching.Concepts.Grid.#ctor(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Initializes a <see cref="T:Puzzles.Matching.Concepts.Grid"/> instance via the specified array and its number of rows and columns.
            </summary>
            <param name="array">Indicates the array.</param>
            <param name="columns">Indicates the number of rows.</param>
            <param name="rows">Indicates the number of columns.</param>
        </member>
        <member name="M:Puzzles.Matching.Concepts.Grid.#ctor(System.Byte[0:,0:])">
            <inheritdoc cref="M:Puzzles.Matching.Concepts.Grid.#ctor(System.Byte[],System.Int32,System.Int32)"/>
        </member>
        <member name="P:Puzzles.Matching.Concepts.Grid.IsEmpty">
            <summary>
            Indicates whether the grid is empty.
            </summary>
        </member>
        <member name="P:Puzzles.Matching.Concepts.Grid.IsValid">
            <summary>
            Indicates whether the grid pattern is valid to be checked.
            </summary>
        </member>
        <member name="P:Puzzles.Matching.Concepts.Grid.RowsLength">
            <summary>
            Indicates the number of rows used.
            </summary>
        </member>
        <member name="P:Puzzles.Matching.Concepts.Grid.ColumnsLength">
            <summary>
            Indicates the number of columns used.
            </summary>
        </member>
        <member name="P:Puzzles.Matching.Concepts.Grid.Length">
            <summary>
            Indicates the number of elements.
            </summary>
        </member>
        <member name="P:Puzzles.Matching.Concepts.Grid.LastItems">
            <summary>
            Indicates the last items in the grid.
            </summary>
        </member>
        <member name="P:Puzzles.Matching.Concepts.Grid.ItemsSet">
            <summary>
            Represents a dictionary of items that their appearing positions (in coordinates).
            </summary>
        </member>
        <member name="P:Puzzles.Matching.Concepts.Grid.Puzzles#Meta#IBoard#Rows">
            <inheritdoc/>
        </member>
        <member name="P:Puzzles.Matching.Concepts.Grid.Puzzles#Meta#IBoard#Columns">
            <inheritdoc/>
        </member>
        <member name="P:Puzzles.Matching.Concepts.Grid.System#Collections#Generic#IReadOnlyCollection{System#Byte}#Count">
            <inheritdoc/>
        </member>
        <member name="P:Puzzles.Matching.Concepts.Grid.Empty">
            <summary>
            Represents an empty instance.
            </summary>
        </member>
        <member name="P:Puzzles.Matching.Concepts.Grid.Item(System.Int32)">
            <summary>
            Gets the element at the specified index.
            </summary>
            <param name="index">The desired index.</param>
            <returns>The item.</returns>
        </member>
        <member name="P:Puzzles.Matching.Concepts.Grid.Item(System.Int32,System.Int32)">
            <summary>
            Gets the element at the specified row and the specified column.
            </summary>
            <param name="row">The desired row index.</param>
            <param name="column">The desired column index.</param>
            <returns>The item.</returns>
        </member>
        <member name="P:Puzzles.Matching.Concepts.Grid.Item(Puzzles.Matching.Concepts.Coordinate)">
            <summary>
            Gets the element at the specified coordinate.
            </summary>
            <param name="coordinate">The desired coordinate.</param>
            <returns>The item.</returns>
        </member>
        <member name="P:Puzzles.Matching.Concepts.Grid.System#Collections#Generic#IReadOnlyList{System#Byte}#Item(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="P:Puzzles.Matching.Concepts.Grid.Pattern">
            <remarks>
            Pattern:<br/>
            <code>\\d{1,3}</code><br/>
            Options:<br/>
            <code>RegexOptions.Compiled</code><br/>
            Explanation:<br/>
            <code>
            â—‹ Match a Unicode digit atomically at least 1 and at most 3 times.<br/>
            </code>
            </remarks>
        </member>
        <member name="M:Puzzles.Matching.Concepts.Grid.Apply(Puzzles.Matching.Concepts.ItemMatch)">
            <summary>
            Apply a match, removing the pair of cells from the grid, making those two cells empty.
            </summary>
            <param name="match">The match to be applied.</param>
        </member>
        <member name="M:Puzzles.Matching.Concepts.Grid.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:Puzzles.Matching.Concepts.Grid.Equals(Puzzles.Matching.Concepts.Grid)">
            <inheritdoc/>
        </member>
        <member name="M:Puzzles.Matching.Concepts.Grid.TryGetMatch(Puzzles.Matching.Concepts.ItemMatch@)">
            <summary>
            Try to find the next match. If the grid has no match, <see langword="false"/> will be returned.
            </summary>
            <param name="result">The result.</param>
            <returns>A <see cref="T:System.Boolean"/> result indicating whether a new match can be found.</returns>
        </member>
        <member name="M:Puzzles.Matching.Concepts.Grid.TryPair(Puzzles.Matching.Concepts.Coordinate,Puzzles.Matching.Concepts.Coordinate,Puzzles.Matching.Concepts.ItemMatch@)">
            <summary>
            Determine whether two values are paired under the matching rule;
            if so, return <see langword="true"/> and return an <see cref="T:Puzzles.Matching.Concepts.ItemMatch"/> object
            to parameter <paramref name="result"/> indicating the result details.
            </summary>
            <param name="coordinate1">Indicates the first coordinate.</param>
            <param name="coordinate2">Indicates the second coordinate.</param>
            <param name="result">Indicates the result match.</param>
            <returns>A <see cref="T:System.Boolean"/> result indicating that.</returns>
            <exception cref="T:System.InvalidOperationException">Throws when the grid is too small (lower than 2x2).</exception>
        </member>
        <member name="M:Puzzles.Matching.Concepts.Grid.IsSameRowPaired(Puzzles.Matching.Concepts.Coordinate,Puzzles.Matching.Concepts.Coordinate)">
            <summary>
            Determine whether two coordinates is in same row, and can be paired.
            </summary>
            <param name="coordinate1">Indicates the first coordinate.</param>
            <param name="coordinate2">Indicates the second coordinate.</param>
            <returns>A <see cref="T:System.Boolean"/> result indicating that.</returns>
        </member>
        <member name="M:Puzzles.Matching.Concepts.Grid.IsSameColumnPaired(Puzzles.Matching.Concepts.Coordinate,Puzzles.Matching.Concepts.Coordinate)">
            <summary>
            Determine whether two coordinates is in same column, and can be paired.
            </summary>
            <param name="coordinate1">Indicates the first coordinate.</param>
            <param name="coordinate2">Indicates the second coordinate.</param>
            <returns>A <see cref="T:System.Boolean"/> result indicating that.</returns>
        </member>
        <member name="M:Puzzles.Matching.Concepts.Grid.IsTurningOncePaired(Puzzles.Matching.Concepts.Coordinate,Puzzles.Matching.Concepts.Coordinate,Puzzles.Matching.Concepts.Coordinate@)">
            <summary>
            Determine whether two coordinates can be paired with one-time turning.
            </summary>
            <param name="coordinate1">Indicates the first coordinate.</param>
            <param name="coordinate2">Indicates the second coordinate.</param>
            <param name="interim">Indicates the interim on turning.</param>
            <returns>A <see cref="T:System.Boolean"/> result indicating that.</returns>
        </member>
        <member name="M:Puzzles.Matching.Concepts.Grid.IsTurningTwicePaired(Puzzles.Matching.Concepts.Coordinate,Puzzles.Matching.Concepts.Coordinate,Puzzles.Matching.Concepts.Coordinate[]@)">
            <summary>
            Determine whether two coordinates can be paired with two-time turning.
            </summary>
            <param name="coordinate1">Indicates the first coordinate.</param>
            <param name="coordinate2">Indicates the second coordinate.</param>
            <param name="interims">Indicates the interim coordinates on turning.</param>
            <returns>A <see cref="T:System.Boolean"/> result indicating that.</returns>
        </member>
        <member name="M:Puzzles.Matching.Concepts.Grid.Blocks(System.Int32,System.Int32)">
            <summary>
            Determine whether the grid has blocked the specified coordinate.
            </summary>
            <param name="x">The row index.</param>
            <param name="y">The column index.</param>
            <returns>A <see cref="T:System.Boolean"/> result indicating that.</returns>
        </member>
        <member name="M:Puzzles.Matching.Concepts.Grid.Blocks(Puzzles.Matching.Concepts.Coordinate)">
            <summary>
            Determine whether the grid has blocked the specified coordinate.
            </summary>
            <param name="coordinate">The coordinate.</param>
            <returns>A <see cref="T:System.Boolean"/> result indicating that.</returns>
        </member>
        <member name="M:Puzzles.Matching.Concepts.Grid.IsCoordinateOutOfBound(Puzzles.Matching.Concepts.Coordinate)">
            <summary>
            Determine whether the current coordinate is out of bound.
            </summary>
            <param name="coordinate">The coordinate.</param>
            <returns>A <see cref="T:System.Boolean"/> result.</returns>
        </member>
        <member name="M:Puzzles.Matching.Concepts.Grid.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Puzzles.Matching.Concepts.Grid.ToString">
            <inheritdoc/>
        </member>
        <member name="M:Puzzles.Matching.Concepts.Grid.ToString(System.String)">
            <inheritdoc cref="M:System.IFormattable.ToString(System.String,System.IFormatProvider)"/>
            <remarks>
            All formats:
            <list type="table">
            <listheader>
            <term>Format</term>
            <description>Meaning</description>
            </listheader>
            <item>
            <term><c>"a"</c></term>
            <description>Array-like format, output like an 2D-array sequence, keeping new line characters if line ends</description>
            </item>
            <item>
            <term><c>"f"</c></term>
            <description>Sequence-like format, output like an 1D-aray flatten each element by removing new line characters</description>
            </item>
            <item>
            <term><c>"f+1"</c></term>
            <description>
            Just like <see cref="M:Puzzles.Matching.Concepts.Grid.ToString(System.String)"/> with format <c>"f"</c>, but with each element added with 1
            </description>
            </item>
            </list>
            </remarks>
        </member>
        <member name="M:Puzzles.Matching.Concepts.Grid.GetAllMatches">
            <summary>
            Try to find all possible steps appeared in the grid; if no steps found, an empty array will be returned.
            </summary>
            <returns>All matched items.</returns>
        </member>
        <member name="M:Puzzles.Matching.Concepts.Grid.GetEnumerator">
            <inheritdoc cref="M:System.Collections.Generic.IEnumerable`1.GetEnumerator"/>
        </member>
        <member name="M:Puzzles.Matching.Concepts.Grid.Clone">
            <inheritdoc cref="M:System.ICloneable.Clone"/>
        </member>
        <member name="M:Puzzles.Matching.Concepts.Grid.GetMatch">
            <summary>
            Try to get the next match; or throws <see cref="T:System.InvalidOperationException"/> if a match is not found.
            </summary>
            <returns>The next match.</returns>
            <exception cref="T:System.InvalidOperationException">Throws when the grid is invalid.</exception>
        </member>
        <member name="M:Puzzles.Matching.Concepts.Grid.System#ICloneable#Clone">
            <inheritdoc/>
        </member>
        <member name="M:Puzzles.Matching.Concepts.Grid.System#IFormattable#ToString(System.String,System.IFormatProvider)">
            <inheritdoc/>
        </member>
        <member name="M:Puzzles.Matching.Concepts.Grid.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:Puzzles.Matching.Concepts.Grid.System#Collections#Generic#IEnumerable{System#Byte}#GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:Puzzles.Matching.Concepts.Grid.TryParse(System.String,Puzzles.Matching.Concepts.Grid@)">
            <inheritdoc cref="M:System.IParsable`1.TryParse(System.String,System.IFormatProvider,`0@)"/>
        </member>
        <member name="M:Puzzles.Matching.Concepts.Grid.Parse(System.String)">
            <inheritdoc cref="M:System.IParsable`1.Parse(System.String,System.IFormatProvider)"/>
        </member>
        <member name="M:Puzzles.Matching.Concepts.Grid.System#IParsable{Puzzles#Matching#Concepts#Grid}#TryParse(System.String,System.IFormatProvider,Puzzles.Matching.Concepts.Grid@)">
            <inheritdoc/>
        </member>
        <member name="M:Puzzles.Matching.Concepts.Grid.System#IParsable{Puzzles#Matching#Concepts#Grid}#Parse(System.String,System.IFormatProvider)">
            <inheritdoc/>
        </member>
        <member name="M:Puzzles.Matching.Concepts.Grid.op_Equality(Puzzles.Matching.Concepts.Grid,Puzzles.Matching.Concepts.Grid)">
            <inheritdoc/>
        </member>
        <member name="M:Puzzles.Matching.Concepts.Grid.op_Inequality(Puzzles.Matching.Concepts.Grid,Puzzles.Matching.Concepts.Grid)">
            <inheritdoc/>
        </member>
        <member name="M:Puzzles.Matching.Concepts.Grid.op_Implicit(Puzzles.Matching.Concepts.Grid)~System.Byte[0:,0:]">
            <summary>
            Implicit cast from <see cref="T:Puzzles.Matching.Concepts.Grid"/> into a <see cref="T:System.Byte"/>[,].
            </summary>
            <param name="grid">The grid.</param>
        </member>
        <member name="M:Puzzles.Matching.Concepts.Grid.op_Explicit(System.Byte[0:,0:])~Puzzles.Matching.Concepts.Grid">
            <summary>
            Explicit cast from <see cref="T:System.Byte"/>[,] into a <see cref="T:Puzzles.Matching.Concepts.Grid"/>.
            </summary>
            <param name="array">An array.</param>
        </member>
        <member name="T:Puzzles.Matching.Concepts.Grid.Enumerator">
            <summary>
            Represents an enumerator type that can iterate on each element.
            </summary>
            <param name="values">The values.</param>
        </member>
        <member name="M:Puzzles.Matching.Concepts.Grid.Enumerator.#ctor(System.Byte[])">
            <summary>
            Represents an enumerator type that can iterate on each element.
            </summary>
            <param name="values">The values.</param>
        </member>
        <member name="F:Puzzles.Matching.Concepts.Grid.Enumerator._index">
            <summary>
            Indicates the index.
            </summary>
        </member>
        <member name="P:Puzzles.Matching.Concepts.Grid.Enumerator.Current">
            <inheritdoc/>
        </member>
        <member name="P:Puzzles.Matching.Concepts.Grid.Enumerator.System#Collections#IEnumerator#Current">
            <inheritdoc/>
        </member>
        <member name="M:Puzzles.Matching.Concepts.Grid.Enumerator.MoveNext">
            <inheritdoc/>
        </member>
        <member name="M:Puzzles.Matching.Concepts.Grid.Enumerator.System#IDisposable#Dispose">
            <inheritdoc/>
        </member>
        <member name="M:Puzzles.Matching.Concepts.Grid.Enumerator.System#Collections#IEnumerator#Reset">
            <inheritdoc/>
        </member>
        <member name="T:Puzzles.Matching.Concepts.ItemMatch">
            <summary>
            Represents a match of item pair.
            </summary>
            <param name="Start">Indicates the start.</param>
            <param name="End">Indicates the end.</param>
            <param name="Interims">Indicates the interim coordinates.</param>
        </member>
        <member name="M:Puzzles.Matching.Concepts.ItemMatch.#ctor(Puzzles.Matching.Concepts.Coordinate,Puzzles.Matching.Concepts.Coordinate,Puzzles.Matching.Concepts.Coordinate[])">
            <summary>
            Represents a match of item pair.
            </summary>
            <param name="Start">Indicates the start.</param>
            <param name="End">Indicates the end.</param>
            <param name="Interims">Indicates the interim coordinates.</param>
        </member>
        <member name="P:Puzzles.Matching.Concepts.ItemMatch.Start">
            <summary>Indicates the start.</summary>
        </member>
        <member name="P:Puzzles.Matching.Concepts.ItemMatch.End">
            <summary>Indicates the end.</summary>
        </member>
        <member name="P:Puzzles.Matching.Concepts.ItemMatch.Interims">
            <summary>Indicates the interim coordinates.</summary>
        </member>
        <member name="P:Puzzles.Matching.Concepts.ItemMatch.TurningCount">
            <summary>
            Indicates the number of turning.
            </summary>
        </member>
        <member name="P:Puzzles.Matching.Concepts.ItemMatch.Distance">
            <summary>
            Indicates the distance of the match.
            </summary>
        </member>
        <member name="M:Puzzles.Matching.Concepts.ItemMatch.ToFullString">
            <inheritdoc cref="M:System.Object.ToString"/>
        </member>
        <member name="M:Puzzles.Matching.Concepts.ItemMatch.PrintMembers(System.Text.StringBuilder)">
            <target name="method" cref="M:Puzzles.Matching.Concepts.ItemMatch.PrintMembers(System.Text.StringBuilder)">
				<summary>
					Provides an easy way to concatenate output members inside a <see langword="record" />
					or a <see langword="record struct" /> type.
				</summary>
				<param name="builder">
					A <see cref="T:System.Text.StringBuilder" /> instance to concatenate values.
				</param>
				<returns>
					A <see cref="T:System.Boolean" /> value indicating whether the method should be consumed by compiler,
					by implementing to-string method <see cref="M:Puzzles.Matching.Concepts.ItemMatch.ToString" />.
				</returns>
				<remarks>
					<para>
						By design of <see langword="record" /> and <see langword="record struct" /> types,
						emit text should be formatted as follows:
						<code><![CDATA[RecordType { Property1 = Value1, Property2 = Value2, Property3 = { NestedProperty = Value3 } }]]></code>
					</para>
					<para>
						This method won't emit type name and curly brackets. If you want to customize emit text,
						you can only change values inside a pair of brackets.
					</para>
					<para>
						The suggested implementation is like this:
						<code><![CDATA[private bool PrintMembers(StringBuilder builder)
{
    builder.Append($"{nameof(Property1)} = {Property1}");
    builder.Append(", ");
    builder.Append($"{nameof(Property2)} = {Property2}");
    builder.Append(", ");
    builder.Append($"{nameof(Property3)} = {{ {Property3} }}");
    return true;
}]]>
						</code>
					</para>
				</remarks>
			</target>
        </member>
        <member name="T:Puzzles.Matching.Generating.Generator">
            <summary>
            Represents a generator.
            </summary>
        </member>
        <member name="F:Puzzles.Matching.Generating.Generator.Rng">
            <summary>
            Indicates the local random number generator.
            </summary>
        </member>
        <member name="M:Puzzles.Matching.Generating.Generator.Generate(System.Int32,System.Int32,System.Byte,System.Threading.CancellationToken)">
            <summary>
            Generates a valid <see cref="T:Puzzles.Matching.Concepts.Grid"/> that contains at least one step to be used.
            </summary>
            <param name="rows">The desired number of rows.</param>
            <param name="columns">The desired number of columns.</param>
            <param name="itemsCount">Indicates the number of items to be used in the grid.</param>
            <param name="cancellationToken">The cancellation token that can cancel the current operation.</param>
            <returns>A <see cref="T:Puzzles.Matching.Concepts.Grid"/> result; or <see langword="null"/> if cancelled.</returns>
            <exception cref="T:System.ArgumentException">Throws when the argument is invalid.</exception>
            <exception cref="T:System.InvalidOperationException">
            Throws when the argument <paramref name="rows"/> and <paramref name="columns"/> are both odd.
            </exception>
        </member>
        <member name="M:Puzzles.Matching.Generating.Generator.Generate(System.Int32,System.Int32,System.Collections.Generic.IReadOnlyDictionary{System.Byte,System.Int32},System.Threading.CancellationToken)">
            <summary>
            Generates a valid <see cref="T:Puzzles.Matching.Concepts.Grid"/> that contains at least one step to be used;
            elements should be guaranteed to appear the specified number of times.
            </summary>
            <param name="rows">The desired number of rows.</param>
            <param name="columns">The desired number of columns.</param>
            <param name="items">Indicates items and its appearing times.</param>
            <param name="cancellationToken">The cancellation token that can cancel the current operation.</param>
            <returns>A <see cref="T:Puzzles.Matching.Concepts.Grid"/> result; or <see langword="null"/> if cancelled.</returns>
            <exception cref="T:System.ArgumentException">Throws when the argument is invalid.</exception>
        </member>
        <member name="M:Puzzles.Matching.Generating.Generator.Generate(System.Int32,System.Int32,System.Collections.Generic.IReadOnlyDictionary{System.Byte,System.ValueTuple{System.Int32,System.Int32}},System.Threading.CancellationToken)">
            <summary>
            Generates a valid <see cref="T:Puzzles.Matching.Concepts.Grid"/> that contains at least one step to be used;
            elements should be guaranteed to appear the specified number of times, in range list <paramref name="itemRanges"/>.
            </summary>
            <param name="rows">The desired number of rows.</param>
            <param name="columns">The desired number of columns.</param>
            <param name="itemRanges">Indicates items and its appearing times in range between corresponding limit.</param>
            <param name="cancellationToken">The cancellation token that can cancel the current operation.</param>
            <returns>A <see cref="T:Puzzles.Matching.Concepts.Grid"/> result; or <see langword="null"/> if cancelled.</returns>
            <exception cref="T:System.ArgumentException">Throws when the argument is invalid.</exception>
            <exception cref="T:System.InvalidOperationException">Throws when the item ranges is invalid.</exception>
        </member>
        <member name="M:Puzzles.Matching.Generating.Generator.GenerateAveraged(System.Int32,System.Int32,System.Byte,System.Threading.CancellationToken)">
            <summary>
            Generates a valid <see cref="T:Puzzles.Matching.Concepts.Grid"/> that contains at least one step to be used, with average value.
            </summary>
            <param name="rows">The desired number of rows.</param>
            <param name="columns">The desired number of columns.</param>
            <param name="itemsCount">Indicates the number of items to be used in the grid.</param>
            <param name="cancellationToken">The cancellation token that can cancel the current operation.</param>
            <returns>A <see cref="T:Puzzles.Matching.Concepts.Grid"/> result; or <see langword="null"/> if cancelled.</returns>
            <exception cref="T:System.ArgumentException">Throws when the argument is invalid.</exception>
            <exception cref="T:System.InvalidOperationException">
            Throws when the argument <paramref name="rows"/> and <paramref name="columns"/> are both odd.
            </exception>
        </member>
        <member name="M:Puzzles.Matching.Generating.Generator.BitArrayToIndices(System.Collections.BitArray,System.Int32)">
            <summary>
            Converts bit array instance into valid array of indices.
            </summary>
            <param name="bitArray">The bit array.</param>
            <param name="startIndex">The start index.</param>
            <returns>The array.</returns>
        </member>
        <member name="M:Puzzles.Matching.Generating.Generator.Equals(System.Object)">
            <inheritdoc cref="M:System.Object.Equals(System.Object)"/>
        </member>
        <member name="M:Puzzles.Matching.Generating.Generator.GetHashCode">
            <inheritdoc cref="M:System.Object.GetHashCode"/>
        </member>
        <member name="M:Puzzles.Matching.Generating.Generator.ToString">
            <inheritdoc cref="M:System.Object.ToString"/>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.Pattern_0">
            <summary>Custom <see cref="T:System.Text.RegularExpressions.Regex"/>-derived type for the Pattern method.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.Pattern_0.Instance">
            <summary>Cached, thread-safe singleton instance.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Pattern_0.#ctor">
            <summary>Initializes the instance.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.Pattern_0.RunnerFactory">
            <summary>Provides a factory for creating <see cref="T:System.Text.RegularExpressions.RegexRunner"/> instances to be used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Pattern_0.RunnerFactory.CreateInstance">
            <summary>Creates an instance of a <see cref="T:System.Text.RegularExpressions.RegexRunner"/> used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.Pattern_0.RunnerFactory.Runner">
            <summary>Provides the runner that contains the custom logic implementing the specified regular expression.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Pattern_0.RunnerFactory.Runner.Scan(System.ReadOnlySpan{System.Char})">
            <summary>Scan the <paramref name="inputSpan"/> starting from base.runtextstart for the next match.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Pattern_0.RunnerFactory.Runner.TryFindNextPossibleStartingPosition(System.ReadOnlySpan{System.Char})">
            <summary>Search <paramref name="inputSpan"/> starting from base.runtextpos for the next location a match could possibly start.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if a possible match was found; false if no more matches are possible.</returns>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Pattern_0.RunnerFactory.Runner.TryMatchAtCurrentPosition(System.ReadOnlySpan{System.Char})">
            <summary>Determine whether <paramref name="inputSpan"/> at base.runtextpos is a match for the regular expression.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if the regular expression matches at the current position; otherwise, false.</returns>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.Utilities">
            <summary>Helper methods used by generated <see cref="T:System.Text.RegularExpressions.Regex"/>-derived implementations.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.Utilities.s_defaultTimeout">
            <summary>Default timeout value set in <see cref="T:System.AppContext"/>, or <see cref="F:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout"/> if none was set.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.Utilities.s_hasTimeout">
            <summary>Whether <see cref="F:System.Text.RegularExpressions.Generated.Utilities.s_defaultTimeout"/> is non-infinite.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Utilities.IndexOfAnyDigit(System.ReadOnlySpan{System.Char})">
            <summary>Finds the next index of any character that matches a Unicode digit.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.Utilities.s_asciiExceptDigits">
            <summary>Supports searching for characters in or not in "\0\u0001\u0002\u0003\u0004\u0005\u0006\a\b\t\n\v\f\r\u000e\u000f\u0010\u0011\u0012\u0013\u0014\u0015\u0016\u0017\u0018\u0019\u001a\u001b\u001c\u001d\u001e\u001f !\"#$%&amp;'()*+,-./:;&lt;=&gt;?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~\u007f".</summary>
        </member>
    </members>
</doc>
