<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Puzzles.WaterSort.Analytics</name>
    </assembly>
    <members>
        <member name="T:Puzzles.WaterSort.Analytics.AnalysisResult">
            <summary>
            Represents the result of analysis.
            </summary>
            <param name="puzzle">Indicates the base puzzle.</param>
        </member>
        <member name="M:Puzzles.WaterSort.Analytics.AnalysisResult.#ctor(Puzzles.WaterSort.Concepts.Puzzle)">
            <summary>
            Represents the result of analysis.
            </summary>
            <param name="puzzle">Indicates the base puzzle.</param>
        </member>
        <member name="P:Puzzles.WaterSort.Analytics.AnalysisResult.IsSolved">
            <summary>
            Indicates whether the puzzle is fully solved.
            </summary>
        </member>
        <member name="P:Puzzles.WaterSort.Analytics.AnalysisResult.FailedReason">
            <summary>
            Indicates the failed reason.
            </summary>
        </member>
        <member name="P:Puzzles.WaterSort.Analytics.AnalysisResult.Steps">
            <summary>
            Indicates the steps found during the analysis.
            </summary>
        </member>
        <member name="P:Puzzles.WaterSort.Analytics.AnalysisResult.ElapsedTime">
            <summary>
            Indicates the elapsed time.
            </summary>
        </member>
        <member name="P:Puzzles.WaterSort.Analytics.AnalysisResult.UnhandledException">
            <summary>
            Indicates the exception encountered.
            </summary>
        </member>
        <member name="P:Puzzles.WaterSort.Analytics.AnalysisResult.InterimSteps">
            <summary>
            Indicates the steps.
            </summary>
        </member>
        <member name="M:Puzzles.WaterSort.Analytics.AnalysisResult.ToString">
            <inheritdoc/>
        </member>
        <member name="P:Puzzles.WaterSort.Analytics.AnalysisResult.Puzzle">
            <summary>
            The generated property declaration for parameter <c>puzzle</c>.
            </summary>
        </member>
        <member name="M:Puzzles.WaterSort.Analytics.AnalysisResult.Equals(System.Object)">
            <inheritdoc cref="M:System.Object.Equals(System.Object)"/>
        </member>
        <member name="M:Puzzles.WaterSort.Analytics.AnalysisResult.GetHashCode">
            <inheritdoc cref="M:System.Object.GetHashCode"/>
        </member>
        <member name="M:Puzzles.WaterSort.Analytics.AnalysisResult.op_Equality(Puzzles.WaterSort.Analytics.AnalysisResult,Puzzles.WaterSort.Analytics.AnalysisResult)">
            <inheritdoc cref="M:System.Numerics.IEqualityOperators`3.op_Equality(`0,`1)"/>
        </member>
        <member name="M:Puzzles.WaterSort.Analytics.AnalysisResult.op_Inequality(Puzzles.WaterSort.Analytics.AnalysisResult,Puzzles.WaterSort.Analytics.AnalysisResult)">
            <inheritdoc cref="M:System.Numerics.IEqualityOperators`3.op_Inequality(`0,`1)"/>
        </member>
        <member name="M:Puzzles.WaterSort.Analytics.AnalysisResult.Equals(Puzzles.WaterSort.Analytics.AnalysisResult)">
            <inheritdoc/>
        </member>
        <member name="T:Puzzles.WaterSort.Analytics.Analyzer">
            <summary>
            Represents an analyzer.
            </summary>
        </member>
        <member name="F:Puzzles.WaterSort.Analytics.Analyzer._collector">
            <summary>
            Indicates the backing collector.
            </summary>
        </member>
        <member name="F:Puzzles.WaterSort.Analytics.Analyzer._rng">
            <summary>
            Indicates the random number generator.
            </summary>
        </member>
        <member name="P:Puzzles.WaterSort.Analytics.Analyzer.RandomSelectSteps">
            <summary>
            Indicates whether the analyzer randomly choose a step to be applied.
            </summary>
            <remarks><b><i>Please note that this option may cause the puzzle to be failed to analyze.</i></b></remarks>
        </member>
        <member name="M:Puzzles.WaterSort.Analytics.Analyzer.Analyze(Puzzles.WaterSort.Concepts.Puzzle)">
            <summary>
            Try to analyze a puzzle.
            </summary>
            <param name="puzzle">The puzzle.</param>
            <returns>An <see cref="T:Puzzles.WaterSort.Analytics.AnalysisResult"/> instance indicating result.</returns>
        </member>
        <member name="T:Puzzles.WaterSort.Analytics.BruteForce">
            <summary>
            Provides a way to make an exhaustive search to find for all possible valid steps in the whole solving environment.
            </summary>
        </member>
        <member name="F:Puzzles.WaterSort.Analytics.BruteForce._collector">
            <summary>
            Indicates the collector.
            </summary>
        </member>
        <member name="M:Puzzles.WaterSort.Analytics.BruteForce.CreateTree(Puzzles.WaterSort.Concepts.Puzzle)">
            <summary>
            Create a <see cref="T:Puzzles.WaterSort.Analytics.BruteForceNode"/> to describe each steps and its related steps.
            </summary>
            <param name="puzzle">The puzzle.</param>
            <returns>A <see cref="T:Puzzles.WaterSort.Analytics.BruteForceNode"/> instance.</returns>
        </member>
        <member name="T:Puzzles.WaterSort.Analytics.ParentLinkedNode">
            <summary>
            Provides a linked list node that describes the parent usages for a step.
            </summary>
            <param name="Step">Indicates the step.</param>
            <param name="CurrentPuzzle">Indicates the current puzzle state.</param>
            <param name="Parent">Indicates the parent node.</param>
        </member>
        <member name="M:Puzzles.WaterSort.Analytics.ParentLinkedNode.#ctor(Puzzles.WaterSort.Analytics.Step,Puzzles.WaterSort.Concepts.Puzzle,Puzzles.WaterSort.Analytics.ParentLinkedNode)">
            <summary>
            Provides a linked list node that describes the parent usages for a step.
            </summary>
            <param name="Step">Indicates the step.</param>
            <param name="CurrentPuzzle">Indicates the current puzzle state.</param>
            <param name="Parent">Indicates the parent node.</param>
        </member>
        <member name="P:Puzzles.WaterSort.Analytics.ParentLinkedNode.Step">
            <summary>Indicates the step.</summary>
        </member>
        <member name="P:Puzzles.WaterSort.Analytics.ParentLinkedNode.CurrentPuzzle">
            <summary>Indicates the current puzzle state.</summary>
        </member>
        <member name="P:Puzzles.WaterSort.Analytics.ParentLinkedNode.Parent">
            <summary>Indicates the parent node.</summary>
        </member>
        <member name="M:Puzzles.WaterSort.Analytics.ParentLinkedNode.#ctor(Puzzles.WaterSort.Concepts.Puzzle)">
            <summary>
            Initializes a <see cref="T:Puzzles.WaterSort.Analytics.ParentLinkedNode"/> instance.
            </summary>
            <param name="currentPuzzle">Indicates the current puzzle.</param>
        </member>
        <member name="P:Puzzles.WaterSort.Analytics.ParentLinkedNode.AncestorsCount">
            <summary>
            Indicates the number of ancestors in the whole chain.
            </summary>
        </member>
        <member name="M:Puzzles.WaterSort.Analytics.ParentLinkedNode.PrintMembers(System.Text.StringBuilder)">
            <target name="method" cref="M:Puzzles.WaterSort.Analytics.ParentLinkedNode.PrintMembers(System.Text.StringBuilder)">
				<summary>
					Provides an easy way to concatenate output members inside a <see langword="record" />
					or a <see langword="record struct" /> type.
				</summary>
				<param name="builder">
					A <see cref="T:System.Text.StringBuilder" /> instance to concatenate values.
				</param>
				<returns>
					A <see cref="T:System.Boolean" /> value indicating whether the method should be consumed by compiler,
					by implementing to-string method <see cref="M:Puzzles.WaterSort.Analytics.ParentLinkedNode.ToString" />.
				</returns>
				<remarks>
					<para>
						By design of <see langword="record" /> and <see langword="record struct" /> types,
						emit text should be formatted as follows:
						<code><![CDATA[RecordType { Property1 = Value1, Property2 = Value2, Property3 = { NestedProperty = Value3 } }]]></code>
					</para>
					<para>
						This method won't emit type name and curly brackets. If you want to customize emit text,
						you can only change values inside a pair of brackets.
					</para>
					<para>
						The suggested implementation is like this:
						<code><![CDATA[private bool PrintMembers(StringBuilder builder)
{
    builder.Append($"{nameof(Property1)} = {Property1}");
    builder.Append(", ");
    builder.Append($"{nameof(Property2)} = {Property2}");
    builder.Append(", ");
    builder.Append($"{nameof(Property3)} = {{ {Property3} }}");
    return true;
}]]>
						</code>
					</para>
				</remarks>
			</target>
        </member>
        <member name="T:Puzzles.WaterSort.Analytics.BruteForceNode">
            <summary>
            Represents a brute force node that describes the current state, and its children states.
            </summary>
            <param name="step">Indicates the step.</param>
            <param name="currentState">Indicates the current state.</param>
        </member>
        <member name="M:Puzzles.WaterSort.Analytics.BruteForceNode.#ctor(Puzzles.WaterSort.Analytics.Step,Puzzles.WaterSort.Concepts.Puzzle)">
            <summary>
            Represents a brute force node that describes the current state, and its children states.
            </summary>
            <param name="step">Indicates the step.</param>
            <param name="currentState">Indicates the current state.</param>
        </member>
        <member name="P:Puzzles.WaterSort.Analytics.BruteForceNode.Children">
            <summary>
            Indicates the children.
            </summary>
        </member>
        <member name="P:Puzzles.WaterSort.Analytics.BruteForceNode.Step">
            <summary>
            The generated property declaration for parameter <c>step</c>.
            </summary>
        </member>
        <member name="P:Puzzles.WaterSort.Analytics.BruteForceNode.CurrentState">
            <summary>
            The generated property declaration for parameter <c>currentState</c>.
            </summary>
        </member>
        <member name="M:Puzzles.WaterSort.Analytics.BruteForceNode.ToString">
            <inheritdoc cref="M:System.Object.ToString"/>
        </member>
        <member name="T:Puzzles.WaterSort.Analytics.Collector">
            <summary>
            Represents a collector.
            </summary>
        </member>
        <member name="M:Puzzles.WaterSort.Analytics.Collector.Collect(Puzzles.WaterSort.Concepts.Puzzle)">
            <summary>
            Gets all possible steps.
            </summary>
            <param name="puzzle">The puzzle.</param>
            <returns>The result steps.</returns>
        </member>
        <member name="T:Puzzles.WaterSort.Analytics.FailedReason">
            <summary>
            Represents a failed reason.
            </summary>
        </member>
        <member name="F:Puzzles.WaterSort.Analytics.FailedReason.None">
            <summary>
            Indicates there's no failure.
            </summary>
        </member>
        <member name="F:Puzzles.WaterSort.Analytics.FailedReason.PuzzleInvalid">
            <summary>
            Indicates the puzzle is invalid.
            </summary>
        </member>
        <member name="F:Puzzles.WaterSort.Analytics.FailedReason.UnhandledException">
            <summary>
            Indicates an unhandled exception is thrown.
            </summary>
        </member>
        <member name="T:Puzzles.WaterSort.Analytics.PuzzleExtensions">
            <summary>
            Provides with extension methods on <see cref="T:Puzzles.WaterSort.Concepts.Puzzle"/>.
            </summary>
            <seealso cref="T:Puzzles.WaterSort.Concepts.Puzzle"/>
        </member>
        <member name="M:Puzzles.WaterSort.Analytics.PuzzleExtensions.Apply(Puzzles.WaterSort.Concepts.Puzzle,Puzzles.WaterSort.Analytics.Step)">
            <summary>
            Applies the current step.
            </summary>
            <param name="puzzle">The puzzle.</param>
            <param name="step">The step to be applied.</param>
        </member>
        <member name="T:Puzzles.WaterSort.Analytics.Step">
            <summary>
            Represents a move step.
            </summary>
            <param name="StartTubeIndex">Indicates the start tube index.</param>
            <param name="EndTubeIndex">Indicates the end tube index.</param>
        </member>
        <member name="M:Puzzles.WaterSort.Analytics.Step.#ctor(System.Int32,System.Int32)">
            <summary>
            Represents a move step.
            </summary>
            <param name="StartTubeIndex">Indicates the start tube index.</param>
            <param name="EndTubeIndex">Indicates the end tube index.</param>
        </member>
        <member name="P:Puzzles.WaterSort.Analytics.Step.StartTubeIndex">
            <summary>Indicates the start tube index.</summary>
        </member>
        <member name="P:Puzzles.WaterSort.Analytics.Step.EndTubeIndex">
            <summary>Indicates the end tube index.</summary>
        </member>
        <member name="M:Puzzles.WaterSort.Analytics.Step.ToString">
            <inheritdoc cref="M:System.Object.ToString"/>
        </member>
        <member name="T:Puzzles.WaterSort.Generating.Generator">
            <summary>
            Represents a generator.
            </summary>
        </member>
        <member name="M:Puzzles.WaterSort.Generating.Generator.#ctor">
            <summary>
            Represents a generator.
            </summary>
        </member>
        <member name="F:Puzzles.WaterSort.Generating.Generator._random">
            <summary>
            Indicates the backing random number generator.
            </summary>
        </member>
        <member name="F:Puzzles.WaterSort.Generating.Generator._analyzer">
            <summary>
            Indicates the analyzer.
            </summary>
        </member>
        <member name="M:Puzzles.WaterSort.Generating.Generator.Generate(System.Int32,System.Byte,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Generates a puzzle that contains the specified number of tubes, and the maximum depth is the specified one.
            </summary>
            <param name="tubesCount">The number of tubes.</param>
            <param name="colorsCount">The number of colors.</param>
            <param name="depth">The depth.</param>
            <param name="cancellationToken">The cancellation token that can cancel the current operation.</param>
            <returns>A <see cref="T:Puzzles.WaterSort.Concepts.Puzzle"/> instance; or <see langword="null"/> if cancelled.</returns>
            <exception cref="T:System.ArgumentException">Throws when the argument <paramref name="colorsCount"/> is invalid.</exception>
        </member>
        <member name="M:Puzzles.WaterSort.Generating.Generator.Equals(System.Object)">
            <inheritdoc cref="M:System.Object.Equals(System.Object)"/>
        </member>
        <member name="M:Puzzles.WaterSort.Generating.Generator.GetHashCode">
            <inheritdoc cref="M:System.Object.GetHashCode"/>
        </member>
        <member name="M:Puzzles.WaterSort.Generating.Generator.ToString">
            <inheritdoc cref="M:System.Object.ToString"/>
        </member>
    </members>
</doc>
