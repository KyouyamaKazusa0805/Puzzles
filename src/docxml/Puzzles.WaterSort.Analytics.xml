<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Puzzles.WaterSort.Analytics</name>
    </assembly>
    <members>
        <member name="T:Puzzles.WaterSort.Analytics.AnalysisResult">
            <summary>
            Represents the result of analysis.
            </summary>
            <param name="puzzle">Indicates the base puzzle.</param>
        </member>
        <member name="M:Puzzles.WaterSort.Analytics.AnalysisResult.#ctor(Puzzles.WaterSort.Concepts.Puzzle)">
            <summary>
            Represents the result of analysis.
            </summary>
            <param name="puzzle">Indicates the base puzzle.</param>
        </member>
        <member name="P:Puzzles.WaterSort.Analytics.AnalysisResult.IsSolved">
            <summary>
            Indicates whether the puzzle is fully solved.
            </summary>
        </member>
        <member name="P:Puzzles.WaterSort.Analytics.AnalysisResult.TotalDifficulty">
            <summary>
            Indicates the total difficulty.
            </summary>
        </member>
        <member name="P:Puzzles.WaterSort.Analytics.AnalysisResult.MaxDifficulty">
            <summary>
            Indicates the maximum difficulty.
            </summary>
        </member>
        <member name="P:Puzzles.WaterSort.Analytics.AnalysisResult.FailedReason">
            <summary>
            Indicates the failed reason.
            </summary>
        </member>
        <member name="P:Puzzles.WaterSort.Analytics.AnalysisResult.Steps">
            <summary>
            Indicates the steps found during the analysis.
            </summary>
        </member>
        <member name="P:Puzzles.WaterSort.Analytics.AnalysisResult.PuzzleStates">
            <summary>
            Indicates the interim puzzle states during the analysis.
            </summary>
        </member>
        <member name="P:Puzzles.WaterSort.Analytics.AnalysisResult.ElapsedTime">
            <summary>
            Indicates the elapsed time.
            </summary>
        </member>
        <member name="P:Puzzles.WaterSort.Analytics.AnalysisResult.UnhandledException">
            <summary>
            Indicates the exception encountered.
            </summary>
        </member>
        <member name="P:Puzzles.WaterSort.Analytics.AnalysisResult.InterimSteps">
            <summary>
            Indicates the steps.
            </summary>
        </member>
        <member name="P:Puzzles.WaterSort.Analytics.AnalysisResult.InterimPuzzleStates">
            <summary>
            Indicates the interim puzzles.
            </summary>
        </member>
        <member name="M:Puzzles.WaterSort.Analytics.AnalysisResult.ToString">
            <inheritdoc/>
        </member>
        <member name="P:Puzzles.WaterSort.Analytics.AnalysisResult.Puzzle">
            <summary>
            The generated property declaration for parameter <c>puzzle</c>.
            </summary>
        </member>
        <member name="M:Puzzles.WaterSort.Analytics.AnalysisResult.Equals(System.Object)">
            <inheritdoc cref="M:System.Object.Equals(System.Object)"/>
        </member>
        <member name="M:Puzzles.WaterSort.Analytics.AnalysisResult.GetHashCode">
            <inheritdoc cref="M:System.Object.GetHashCode"/>
        </member>
        <member name="M:Puzzles.WaterSort.Analytics.AnalysisResult.op_Equality(Puzzles.WaterSort.Analytics.AnalysisResult,Puzzles.WaterSort.Analytics.AnalysisResult)">
            <inheritdoc cref="M:System.Numerics.IEqualityOperators`3.op_Equality(`0,`1)"/>
        </member>
        <member name="M:Puzzles.WaterSort.Analytics.AnalysisResult.op_Inequality(Puzzles.WaterSort.Analytics.AnalysisResult,Puzzles.WaterSort.Analytics.AnalysisResult)">
            <inheritdoc cref="M:System.Numerics.IEqualityOperators`3.op_Inequality(`0,`1)"/>
        </member>
        <member name="M:Puzzles.WaterSort.Analytics.AnalysisResult.Equals(Puzzles.WaterSort.Analytics.AnalysisResult)">
            <inheritdoc/>
        </member>
        <member name="T:Puzzles.WaterSort.Analytics.Analyzer">
            <summary>
            Represents an analyzer.
            </summary>
        </member>
        <member name="F:Puzzles.WaterSort.Analytics.Analyzer._collector">
            <summary>
            Indicates the backing collector.
            </summary>
        </member>
        <member name="M:Puzzles.WaterSort.Analytics.Analyzer.Analyze(Puzzles.WaterSort.Concepts.Puzzle)">
            <summary>
            Try to analyze a puzzle.
            </summary>
            <param name="puzzle">The puzzle.</param>
            <returns>An <see cref="T:Puzzles.WaterSort.Analytics.AnalysisResult"/> instance indicating result.</returns>
        </member>
        <member name="T:Puzzles.WaterSort.Analytics.Extensions">
            <target name="class" when="extension">
				<summary>
					Provides with file-local extension methods.
				</summary>
			</target>
        </member>
        <member name="M:Puzzles.WaterSort.Analytics.Extensions.MakeDifficulty(System.ReadOnlySpan{Puzzles.WaterSort.Analytics.Step},Puzzles.WaterSort.Concepts.Puzzle,System.Boolean)">
            <summary>
            Create a dictionary that stores difficulty rating and steps.
            </summary>
            <param name="steps">The steps.</param>
            <param name="puzzle">The puzzle.</param>
            <param name="fixRoot">
            Indicates whether the tube will be fixed and won't create steps on root tubes
            (a tube that only contains one color, with size 1).
            </param>
            <returns>A dictionary.</returns>
        </member>
        <member name="T:Puzzles.WaterSort.Analytics.Collector">
            <summary>
            Represents a collector.
            </summary>
        </member>
        <member name="M:Puzzles.WaterSort.Analytics.Collector.Collect(Puzzles.WaterSort.Concepts.Puzzle)">
            <summary>
            Gets all possible steps.
            </summary>
            <param name="puzzle">The puzzle.</param>
            <returns>The result steps.</returns>
        </member>
        <member name="T:Puzzles.WaterSort.Analytics.FailedReason">
            <summary>
            Represents a failed reason.
            </summary>
        </member>
        <member name="F:Puzzles.WaterSort.Analytics.FailedReason.None">
            <summary>
            Indicates there's no failure.
            </summary>
        </member>
        <member name="F:Puzzles.WaterSort.Analytics.FailedReason.PuzzleInvalid">
            <summary>
            Indicates the puzzle is invalid.
            </summary>
        </member>
        <member name="F:Puzzles.WaterSort.Analytics.FailedReason.UnhandledException">
            <summary>
            Indicates an unhandled exception is thrown.
            </summary>
        </member>
        <member name="T:Puzzles.WaterSort.Analytics.PuzzleExtensions">
            <summary>
            Provides with extension methods on <see cref="T:Puzzles.WaterSort.Concepts.Puzzle"/>.
            </summary>
            <seealso cref="T:Puzzles.WaterSort.Concepts.Puzzle"/>
        </member>
        <member name="M:Puzzles.WaterSort.Analytics.PuzzleExtensions.Apply(Puzzles.WaterSort.Concepts.Puzzle,Puzzles.WaterSort.Analytics.Step)">
            <summary>
            Applies the current step.
            </summary>
            <param name="puzzle">The puzzle.</param>
            <param name="step">The step to be applied.</param>
        </member>
        <member name="T:Puzzles.WaterSort.Analytics.Step">
            <summary>
            Represents a move step.
            </summary>
            <param name="startTubeIndex">Indicates the start tube index.</param>
            <param name="endTubeIndex">Indicates the end tube index.</param>
            <param name="difficulty">Indicates the difficulty rating.</param>
        </member>
        <member name="M:Puzzles.WaterSort.Analytics.Step.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            Represents a move step.
            </summary>
            <param name="startTubeIndex">Indicates the start tube index.</param>
            <param name="endTubeIndex">Indicates the end tube index.</param>
            <param name="difficulty">Indicates the difficulty rating.</param>
        </member>
        <member name="M:Puzzles.WaterSort.Analytics.Step.Deconstruct(System.Int32@,System.Int32@)">
            <target name="method">
				<summary>
					Deconstruct the current instance into multiple values, which means you can use
					the value-tuple syntax like <c>(a, b, c)</c> to define your own deconstruction logic.
				</summary>
			</target>
        </member>
        <member name="M:Puzzles.WaterSort.Analytics.Step.Deconstruct(System.Int32@,System.Int32@,System.Int32@)">
            <target name="method">
				<summary>
					Deconstruct the current instance into multiple values, which means you can use
					the value-tuple syntax like <c>(a, b, c)</c> to define your own deconstruction logic.
				</summary>
			</target>
        </member>
        <member name="M:Puzzles.WaterSort.Analytics.Step.ToString">
            <inheritdoc cref="M:System.Object.ToString"/>
        </member>
        <member name="P:Puzzles.WaterSort.Analytics.Step.StartTubeIndex">
            <summary>
            The generated property declaration for parameter <c>startTubeIndex</c>.
            </summary>
        </member>
        <member name="P:Puzzles.WaterSort.Analytics.Step.EndTubeIndex">
            <summary>
            The generated property declaration for parameter <c>endTubeIndex</c>.
            </summary>
        </member>
        <member name="P:Puzzles.WaterSort.Analytics.Step.Difficulty">
            <summary>
            The generated property declaration for parameter <c>difficulty</c>.
            </summary>
        </member>
        <member name="M:Puzzles.WaterSort.Analytics.Step.Equals(System.Object)">
            <inheritdoc cref="M:System.Object.Equals(System.Object)"/>
        </member>
        <member name="M:Puzzles.WaterSort.Analytics.Step.GetHashCode">
            <inheritdoc cref="M:System.Object.GetHashCode"/>
        </member>
        <member name="M:Puzzles.WaterSort.Analytics.Step.op_Equality(Puzzles.WaterSort.Analytics.Step,Puzzles.WaterSort.Analytics.Step)">
            <inheritdoc cref="M:System.Numerics.IEqualityOperators`3.op_Equality(`0,`1)"/>
        </member>
        <member name="M:Puzzles.WaterSort.Analytics.Step.op_Inequality(Puzzles.WaterSort.Analytics.Step,Puzzles.WaterSort.Analytics.Step)">
            <inheritdoc cref="M:System.Numerics.IEqualityOperators`3.op_Inequality(`0,`1)"/>
        </member>
        <member name="M:Puzzles.WaterSort.Analytics.Step.Equals(Puzzles.WaterSort.Analytics.Step)">
            <inheritdoc/>
        </member>
        <member name="T:Puzzles.WaterSort.Generating.Generator">
            <summary>
            Represents a generator.
            </summary>
        </member>
        <member name="M:Puzzles.WaterSort.Generating.Generator.#ctor">
            <summary>
            Represents a generator.
            </summary>
        </member>
        <member name="F:Puzzles.WaterSort.Generating.Generator._random">
            <summary>
            Indicates the backing random number generator.
            </summary>
        </member>
        <member name="F:Puzzles.WaterSort.Generating.Generator._analyzer">
            <summary>
            Indicates the analyzer.
            </summary>
        </member>
        <member name="M:Puzzles.WaterSort.Generating.Generator.Generate(System.Int32,System.Byte,System.Int32,System.Threading.CancellationToken)">
            <summary>
            Generates a puzzle that contains the specified number of tubes, and the maximum depth is the specified one.
            </summary>
            <param name="tubesCount">The number of tubes.</param>
            <param name="colorsCount">The number of colors.</param>
            <param name="depth">The depth.</param>
            <param name="cancellationToken">The cancellation token that can cancel the current operation.</param>
            <returns>A <see cref="T:Puzzles.WaterSort.Concepts.Puzzle"/> instance; or <see langword="null"/> if cancelled.</returns>
            <exception cref="T:System.ArgumentException">Throws when the argument <paramref name="colorsCount"/> is invalid.</exception>
        </member>
        <member name="M:Puzzles.WaterSort.Generating.Generator.Equals(System.Object)">
            <inheritdoc cref="M:System.Object.Equals(System.Object)"/>
        </member>
        <member name="M:Puzzles.WaterSort.Generating.Generator.GetHashCode">
            <inheritdoc cref="M:System.Object.GetHashCode"/>
        </member>
        <member name="M:Puzzles.WaterSort.Generating.Generator.ToString">
            <inheritdoc cref="M:System.Object.ToString"/>
        </member>
        <member name="T:Puzzles.WaterSort.Measuring.Complexity">
            <summary>
            Represents a list of methods that can calculate complexity.
            </summary>
        </member>
        <member name="M:Puzzles.WaterSort.Measuring.Complexity.GetColorComplexity(System.Byte,Puzzles.WaterSort.Concepts.Puzzle)">
            <summary>
            Returns the complexity of the color.
            </summary>
            <param name="color">The color.</param>
            <param name="puzzle">The puzzle.</param>
            <returns>The complexity.</returns>
        </member>
        <member name="M:Puzzles.WaterSort.Measuring.Complexity.GetTubeComplexity(Puzzles.WaterSort.Concepts.Tube,Puzzles.WaterSort.Concepts.Puzzle)">
            <summary>
            Returns the complexity of the tube.
            </summary>
            <param name="tube">The tube.</param>
            <param name="puzzle">The puzzle.</param>
            <returns>The complexity.</returns>
        </member>
        <member name="M:Puzzles.WaterSort.Measuring.Complexity.GetComplexityDictionary(Puzzles.WaterSort.Concepts.Puzzle,System.Collections.Generic.Dictionary{System.Byte,System.Int32}@,System.Collections.Generic.Dictionary{System.Int32,System.Int32}@)">
            <summary>
            Calcualtes complexity dictionary on both colors and tubes.
            </summary>
            <param name="puzzle">The puzzle.</param>
            <param name="colorComplexity">The complexity dictionary grouped by colors.</param>
            <param name="tubeComplexity">The complexity dictionary grouped by tubes, whose key is index of the tube.</param>
        </member>
    </members>
</doc>
