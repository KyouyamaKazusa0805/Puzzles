<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Puzzles.WaterSort.Core</name>
    </assembly>
    <members>
        <member name="T:Puzzles.WaterSort.Concepts.Puzzle">
            <summary>
            Represents a puzzle.
            </summary>
            <param name="tubes">Indicates the tubes.</param>
        </member>
        <member name="M:Puzzles.WaterSort.Concepts.Puzzle.#ctor(Puzzles.WaterSort.Concepts.Tube[])">
            <summary>
            Represents a puzzle.
            </summary>
            <param name="tubes">Indicates the tubes.</param>
        </member>
        <member name="P:Puzzles.WaterSort.Concepts.Puzzle.IsSolved">
            <summary>
            Indicates whether the puzzle is finished.
            </summary>
        </member>
        <member name="P:Puzzles.WaterSort.Concepts.Puzzle.IsInitial">
            <summary>
            Determine whether the current puzzle is at initial state.
            </summary>
        </member>
        <member name="P:Puzzles.WaterSort.Concepts.Puzzle.Length">
            <summary>
            Indicates the number of the tubes.
            </summary>
        </member>
        <member name="P:Puzzles.WaterSort.Concepts.Puzzle.Depth">
            <summary>
            Indicates the depth of the puzzle.
            </summary>
        </member>
        <member name="P:Puzzles.WaterSort.Concepts.Puzzle.Tubes">
            <summary>
            Indicates the tubes.
            </summary>
        </member>
        <member name="P:Puzzles.WaterSort.Concepts.Puzzle.ColorCounting">
            <summary>
            Returns a <see cref="T:System.Collections.Frozen.FrozenDictionary`2"/> that describes the color counting result.
            </summary>
        </member>
        <member name="P:Puzzles.WaterSort.Concepts.Puzzle.ColorDistribution">
            <summary>
            Returns a <see cref="T:System.Collections.Frozen.FrozenDictionary`2"/> that describes the colors,
            and the tubes containing such color.
            </summary>
        </member>
        <member name="P:Puzzles.WaterSort.Concepts.Puzzle.System#Collections#Generic#IReadOnlyCollection{Puzzles#WaterSort#Concepts#Tube}#Count">
            <inheritdoc/>
        </member>
        <member name="P:Puzzles.WaterSort.Concepts.Puzzle.Puzzles#Meta#DataStructures#IDataStructure#Type">
            <inheritdoc/>
        </member>
        <member name="P:Puzzles.WaterSort.Concepts.Puzzle.Puzzles#Meta#DataStructures#IDataStructure#Base">
            <inheritdoc/>
        </member>
        <member name="P:Puzzles.WaterSort.Concepts.Puzzle.Item(System.Int32)">
            <summary>
            Gets the tube at the specified index.
            </summary>
            <param name="index">The index.</param>
            <returns>A <see cref="T:Puzzles.WaterSort.Concepts.Tube"/> instance.</returns>
        </member>
        <member name="M:Puzzles.WaterSort.Concepts.Puzzle.TrueForAll(System.Func{Puzzles.WaterSort.Concepts.Tube,System.Boolean})">
            <summary>
            Determine whether all tubes satisfy the specified condition.
            </summary>
            <param name="predicate">The condition.</param>
            <returns>A <see cref="T:System.Boolean"/> result indicating that.</returns>
        </member>
        <member name="M:Puzzles.WaterSort.Concepts.Puzzle.Exists(System.Func{Puzzles.WaterSort.Concepts.Tube,System.Boolean})">
            <summary>
            Determine whether at least one tube satisfies the specified condition.
            </summary>
            <param name="predicate">The condition.</param>
            <returns>A <see cref="T:System.Boolean"/> result indicating that.</returns>
        </member>
        <member name="M:Puzzles.WaterSort.Concepts.Puzzle.CanAccommodateColor(System.Byte,System.Int32)">
            <summary>
            Determine whether the current puzzle can accommodate the specified color into the specified tube.
            </summary>
            <param name="color">The color.</param>
            <param name="tubeIndex">The index of the tube.</param>
            <returns>A <see cref="T:System.Boolean"/> result.</returns>
            <exception cref="T:System.InvalidOperationException">Throws when the color value is invalid.</exception>
        </member>
        <member name="M:Puzzles.WaterSort.Concepts.Puzzle.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Puzzles.WaterSort.Concepts.Puzzle.ToString">
            <inheritdoc/>
        </member>
        <member name="M:Puzzles.WaterSort.Concepts.Puzzle.GetEnumerator">
            <inheritdoc cref="M:System.Collections.Generic.IEnumerable`1.GetEnumerator"/>
        </member>
        <member name="M:Puzzles.WaterSort.Concepts.Puzzle.Clone">
            <inheritdoc cref="M:System.ICloneable.Clone"/>
        </member>
        <member name="M:Puzzles.WaterSort.Concepts.Puzzle.System#ICloneable#Clone">
            <inheritdoc/>
        </member>
        <member name="M:Puzzles.WaterSort.Concepts.Puzzle.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:Puzzles.WaterSort.Concepts.Puzzle.System#Collections#Generic#IEnumerable{Puzzles#WaterSort#Concepts#Tube}#GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:Puzzles.WaterSort.Concepts.Puzzle.TryParse(System.String,Puzzles.WaterSort.Concepts.Puzzle@)">
            <inheritdoc cref="M:System.IParsable`1.TryParse(System.String,System.IFormatProvider,`0@)"/>
        </member>
        <member name="M:Puzzles.WaterSort.Concepts.Puzzle.Create(System.ReadOnlySpan{Puzzles.WaterSort.Concepts.Tube})">
            <summary>
            Create a <see cref="T:Puzzles.WaterSort.Concepts.Puzzle"/> with tubes.
            </summary>
            <param name="tubes">The tubes.</param>
            <returns>A <see cref="T:Puzzles.WaterSort.Concepts.Puzzle"/>.</returns>
        </member>
        <member name="M:Puzzles.WaterSort.Concepts.Puzzle.Parse(System.String)">
            <inheritdoc cref="M:System.IParsable`1.Parse(System.String,System.IFormatProvider)"/>
        </member>
        <member name="P:Puzzles.WaterSort.Concepts.Puzzle.TubePattern">
            <remarks>
            Pattern:<br/>
            <code>\\[(|\\d+(,\\s*\\d+)*)\\]</code><br/>
            Options:<br/>
            <code>RegexOptions.Compiled</code><br/>
            Explanation:<br/>
            <code>
            ○ Match '['.<br/>
            ○ 1st capture group.<br/>
                ○ Match with 2 alternative expressions.<br/>
                    ○ Match an empty string.<br/>
                    ○ Match a sequence of expressions.<br/>
                        ○ Match a Unicode digit greedily at least once.<br/>
                        ○ Loop greedily any number of times.<br/>
                            ○ 2nd capture group.<br/>
                                ○ Match ','.<br/>
                                ○ Match a whitespace character atomically any number of times.<br/>
                                ○ Match a Unicode digit atomically at least once.<br/>
            ○ Match ']'.<br/>
            </code>
            </remarks>
        </member>
        <member name="P:Puzzles.WaterSort.Concepts.Puzzle.DigitPattern">
            <remarks>
            Pattern:<br/>
            <code>\\d+</code><br/>
            Options:<br/>
            <code>RegexOptions.Compiled</code><br/>
            Explanation:<br/>
            <code>
            ○ Match a Unicode digit atomically at least once.<br/>
            </code>
            </remarks>
        </member>
        <member name="T:Puzzles.WaterSort.Concepts.Puzzle.Enumerator">
            <summary>
            Represents an enumerator type that can iterate on each element in the tube.
            </summary>
            <param name="items">Indicates the items.</param>
        </member>
        <member name="M:Puzzles.WaterSort.Concepts.Puzzle.Enumerator.#ctor(System.ReadOnlySpan{Puzzles.WaterSort.Concepts.Tube})">
            <summary>
            Represents an enumerator type that can iterate on each element in the tube.
            </summary>
            <param name="items">Indicates the items.</param>
        </member>
        <member name="F:Puzzles.WaterSort.Concepts.Puzzle.Enumerator._items">
            <summary>
            Indicates the items.
            </summary>
        </member>
        <member name="F:Puzzles.WaterSort.Concepts.Puzzle.Enumerator._index">
            <summary>
            Indicates the index.
            </summary>
        </member>
        <member name="P:Puzzles.WaterSort.Concepts.Puzzle.Enumerator.Current">
            <inheritdoc/>
        </member>
        <member name="P:Puzzles.WaterSort.Concepts.Puzzle.Enumerator.System#Collections#IEnumerator#Current">
            <inheritdoc/>
        </member>
        <member name="M:Puzzles.WaterSort.Concepts.Puzzle.Enumerator.MoveNext">
            <inheritdoc/>
        </member>
        <member name="M:Puzzles.WaterSort.Concepts.Puzzle.Enumerator.System#IDisposable#Dispose">
            <inheritdoc/>
        </member>
        <member name="M:Puzzles.WaterSort.Concepts.Puzzle.Enumerator.System#Collections#IEnumerator#Reset">
            <inheritdoc/>
        </member>
        <member name="M:Puzzles.WaterSort.Concepts.Puzzle.Equals(System.Object)">
            <inheritdoc cref="M:System.Object.Equals(System.Object)"/>
        </member>
        <member name="M:Puzzles.WaterSort.Concepts.Puzzle.op_Equality(Puzzles.WaterSort.Concepts.Puzzle,Puzzles.WaterSort.Concepts.Puzzle)">
            <inheritdoc cref="M:System.Numerics.IEqualityOperators`3.op_Equality(`0,`1)"/>
        </member>
        <member name="M:Puzzles.WaterSort.Concepts.Puzzle.op_Inequality(Puzzles.WaterSort.Concepts.Puzzle,Puzzles.WaterSort.Concepts.Puzzle)">
            <inheritdoc cref="M:System.Numerics.IEqualityOperators`3.op_Inequality(`0,`1)"/>
        </member>
        <member name="M:Puzzles.WaterSort.Concepts.Puzzle.Equals(Puzzles.WaterSort.Concepts.Puzzle)">
            <inheritdoc/>
        </member>
        <member name="T:Puzzles.WaterSort.Concepts.Tube">
            <summary>
            Represents a tube.
            </summary>
            <param name="_items">Indicates the items.</param>
        </member>
        <member name="M:Puzzles.WaterSort.Concepts.Tube.#ctor(System.Collections.Generic.Stack{System.Byte})">
            <summary>
            Represents a tube.
            </summary>
            <param name="_items">Indicates the items.</param>
        </member>
        <member name="P:Puzzles.WaterSort.Concepts.Tube.IsSolved">
            <summary>
            Indicates whether all items are same-colored in the tube.
            </summary>
        </member>
        <member name="P:Puzzles.WaterSort.Concepts.Tube.IsEmpty">
            <summary>
            Indicates whether the tube is empty.
            </summary>
        </member>
        <member name="P:Puzzles.WaterSort.Concepts.Tube.IsMonocolored">
            <summary>
            Determine whether the tube is mono-colored (only one color).
            </summary>
        </member>
        <member name="P:Puzzles.WaterSort.Concepts.Tube.Length">
            <summary>
            Indicates the number of tube items.
            </summary>
        </member>
        <member name="P:Puzzles.WaterSort.Concepts.Tube.TopColorSpannedCount">
            <summary>
            Indicates the number of same color element above the top.
            </summary>
        </member>
        <member name="P:Puzzles.WaterSort.Concepts.Tube.ColorsCount">
            <summary>
            Indicates the number of colors.
            </summary>
        </member>
        <member name="P:Puzzles.WaterSort.Concepts.Tube.TopColor">
            <summary>
            Indicates the top element; return <see cref="F:System.Byte.MaxValue"/> if the tube is empty.
            </summary>
        </member>
        <member name="P:Puzzles.WaterSort.Concepts.Tube.Colors">
            <summary>
            Indicates all colors in the tube.
            </summary>
        </member>
        <member name="P:Puzzles.WaterSort.Concepts.Tube.Items">
            <summary>
            Indicates the items.
            </summary>
        </member>
        <member name="P:Puzzles.WaterSort.Concepts.Tube.SpanningDistribution">
            <summary>
            Returns a <see cref="T:System.Collections.Frozen.FrozenDictionary`2"/> that describes the spanning of water among different colors
            inside the current tube.
            </summary>
        </member>
        <member name="P:Puzzles.WaterSort.Concepts.Tube.ColorDistribution">
            <summary>
            Returns a <see cref="T:System.Collections.Frozen.FrozenDictionary`2"/> that describes the appeared colors and the times of appearing.
            </summary>
        </member>
        <member name="P:Puzzles.WaterSort.Concepts.Tube.System#Collections#Generic#IReadOnlyCollection{System#Byte}#Count">
            <inheritdoc/>
        </member>
        <member name="P:Puzzles.WaterSort.Concepts.Tube.Puzzles#Meta#DataStructures#IDataStructure#Type">
            <inheritdoc/>
        </member>
        <member name="P:Puzzles.WaterSort.Concepts.Tube.Puzzles#Meta#DataStructures#IDataStructure#Base">
            <inheritdoc/>
        </member>
        <member name="M:Puzzles.WaterSort.Concepts.Tube.Push(System.Byte,System.Int32)">
            <summary>
            Pushes the specified color into the tube, with the specified number of times.
            </summary>
            <param name="color">The color.</param>
            <param name="count">The number of times pushed.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Throws when the argument <paramref name="color"/> is invalid.</exception>
        </member>
        <member name="M:Puzzles.WaterSort.Concepts.Tube.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Puzzles.WaterSort.Concepts.Tube.GetSpannedCount(System.Byte)">
            <summary>
            Gets the number of spanned water elements of the specified color in the current tube.
            </summary>
            <param name="color">The color.</param>
            <returns>The number of spanning.</returns>
        </member>
        <member name="M:Puzzles.WaterSort.Concepts.Tube.ToString">
            <inheritdoc/>
        </member>
        <member name="M:Puzzles.WaterSort.Concepts.Tube.Pop(System.Int32)">
            <summary>
            Pops the color from the top with the specified number of units.
            </summary>
            <param name="count">The desired number of popped color units.</param>
            <returns>The color popped; or throws <see cref="T:System.InvalidOperationException"/> if failed to pour out.</returns>
            <exception cref="T:System.InvalidOperationException">Throws when the operation is invalid.</exception>
        </member>
        <member name="M:Puzzles.WaterSort.Concepts.Tube.Pop(System.Int32@)">
            <summary>
            Pops the color from the top; if the color occupies multiple units of the tube, all will be popped.
            </summary>
            <param name="count">The number of popped color units.</param>
            <returns>The color popped.</returns>
        </member>
        <member name="M:Puzzles.WaterSort.Concepts.Tube.GetEnumerator">
            <inheritdoc cref="M:System.Collections.Generic.IEnumerable`1.GetEnumerator"/>
        </member>
        <member name="M:Puzzles.WaterSort.Concepts.Tube.Clone">
            <inheritdoc cref="M:System.ICloneable.Clone"/>
        </member>
        <member name="M:Puzzles.WaterSort.Concepts.Tube.System#ICloneable#Clone">
            <inheritdoc/>
        </member>
        <member name="M:Puzzles.WaterSort.Concepts.Tube.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:Puzzles.WaterSort.Concepts.Tube.System#Collections#Generic#IEnumerable{System#Byte}#GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:Puzzles.WaterSort.Concepts.Tube.Create(System.ReadOnlySpan{System.Byte})">
            <summary>
            Creates a <see cref="T:Puzzles.WaterSort.Concepts.Tube"/> object via a list of <see cref="T:System.Byte"/> instances.
            </summary>
            <param name="colors">The colors.</param>
            <returns>The tube created, with FILO structure.</returns>
        </member>
        <member name="T:Puzzles.WaterSort.Concepts.Tube.Enumerator">
            <summary>
            Represents an enumerator type that can iterate on each element in the tube.
            </summary>
            <param name="items">Indicates the items.</param>
        </member>
        <member name="M:Puzzles.WaterSort.Concepts.Tube.Enumerator.#ctor(System.ReadOnlySpan{System.Byte})">
            <summary>
            Represents an enumerator type that can iterate on each element in the tube.
            </summary>
            <param name="items">Indicates the items.</param>
        </member>
        <member name="F:Puzzles.WaterSort.Concepts.Tube.Enumerator._items">
            <summary>
            Indicates the items.
            </summary>
        </member>
        <member name="F:Puzzles.WaterSort.Concepts.Tube.Enumerator._index">
            <summary>
            Indicates the index.
            </summary>
        </member>
        <member name="P:Puzzles.WaterSort.Concepts.Tube.Enumerator.Current">
            <inheritdoc/>
        </member>
        <member name="P:Puzzles.WaterSort.Concepts.Tube.Enumerator.System#Collections#IEnumerator#Current">
            <inheritdoc/>
        </member>
        <member name="M:Puzzles.WaterSort.Concepts.Tube.Enumerator.MoveNext">
            <inheritdoc/>
        </member>
        <member name="M:Puzzles.WaterSort.Concepts.Tube.Enumerator.System#IDisposable#Dispose">
            <inheritdoc/>
        </member>
        <member name="M:Puzzles.WaterSort.Concepts.Tube.Enumerator.System#Collections#IEnumerator#Reset">
            <inheritdoc/>
        </member>
        <member name="M:Puzzles.WaterSort.Concepts.Tube.Equals(System.Object)">
            <inheritdoc cref="M:System.Object.Equals(System.Object)"/>
        </member>
        <member name="M:Puzzles.WaterSort.Concepts.Tube.op_Equality(Puzzles.WaterSort.Concepts.Tube,Puzzles.WaterSort.Concepts.Tube)">
            <inheritdoc cref="M:System.Numerics.IEqualityOperators`3.op_Equality(`0,`1)"/>
        </member>
        <member name="M:Puzzles.WaterSort.Concepts.Tube.op_Inequality(Puzzles.WaterSort.Concepts.Tube,Puzzles.WaterSort.Concepts.Tube)">
            <inheritdoc cref="M:System.Numerics.IEqualityOperators`3.op_Inequality(`0,`1)"/>
        </member>
        <member name="M:Puzzles.WaterSort.Concepts.Tube.Equals(Puzzles.WaterSort.Concepts.Tube)">
            <inheritdoc/>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.TubePattern_0">
            <summary>Custom <see cref="T:System.Text.RegularExpressions.Regex"/>-derived type for the TubePattern method.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.TubePattern_0.Instance">
            <summary>Cached, thread-safe singleton instance.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.TubePattern_0.#ctor">
            <summary>Initializes the instance.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.TubePattern_0.RunnerFactory">
            <summary>Provides a factory for creating <see cref="T:System.Text.RegularExpressions.RegexRunner"/> instances to be used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.TubePattern_0.RunnerFactory.CreateInstance">
            <summary>Creates an instance of a <see cref="T:System.Text.RegularExpressions.RegexRunner"/> used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.TubePattern_0.RunnerFactory.Runner">
            <summary>Provides the runner that contains the custom logic implementing the specified regular expression.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.TubePattern_0.RunnerFactory.Runner.Scan(System.ReadOnlySpan{System.Char})">
            <summary>Scan the <paramref name="inputSpan"/> starting from base.runtextstart for the next match.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.TubePattern_0.RunnerFactory.Runner.TryFindNextPossibleStartingPosition(System.ReadOnlySpan{System.Char})">
            <summary>Search <paramref name="inputSpan"/> starting from base.runtextpos for the next location a match could possibly start.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if a possible match was found; false if no more matches are possible.</returns>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.TubePattern_0.RunnerFactory.Runner.TryMatchAtCurrentPosition(System.ReadOnlySpan{System.Char})">
            <summary>Determine whether <paramref name="inputSpan"/> at base.runtextpos is a match for the regular expression.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if the regular expression matches at the current position; otherwise, false.</returns>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.DigitPattern_1">
            <summary>Custom <see cref="T:System.Text.RegularExpressions.Regex"/>-derived type for the DigitPattern method.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.DigitPattern_1.Instance">
            <summary>Cached, thread-safe singleton instance.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.DigitPattern_1.#ctor">
            <summary>Initializes the instance.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.DigitPattern_1.RunnerFactory">
            <summary>Provides a factory for creating <see cref="T:System.Text.RegularExpressions.RegexRunner"/> instances to be used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.DigitPattern_1.RunnerFactory.CreateInstance">
            <summary>Creates an instance of a <see cref="T:System.Text.RegularExpressions.RegexRunner"/> used by methods on <see cref="T:System.Text.RegularExpressions.Regex"/>.</summary>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.DigitPattern_1.RunnerFactory.Runner">
            <summary>Provides the runner that contains the custom logic implementing the specified regular expression.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.DigitPattern_1.RunnerFactory.Runner.Scan(System.ReadOnlySpan{System.Char})">
            <summary>Scan the <paramref name="inputSpan"/> starting from base.runtextstart for the next match.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.DigitPattern_1.RunnerFactory.Runner.TryFindNextPossibleStartingPosition(System.ReadOnlySpan{System.Char})">
            <summary>Search <paramref name="inputSpan"/> starting from base.runtextpos for the next location a match could possibly start.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if a possible match was found; false if no more matches are possible.</returns>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.DigitPattern_1.RunnerFactory.Runner.TryMatchAtCurrentPosition(System.ReadOnlySpan{System.Char})">
            <summary>Determine whether <paramref name="inputSpan"/> at base.runtextpos is a match for the regular expression.</summary>
            <param name="inputSpan">The text being scanned by the regular expression.</param>
            <returns>true if the regular expression matches at the current position; otherwise, false.</returns>
        </member>
        <member name="T:System.Text.RegularExpressions.Generated.Utilities">
            <summary>Helper methods used by generated <see cref="T:System.Text.RegularExpressions.Regex"/>-derived implementations.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.Utilities.s_defaultTimeout">
            <summary>Default timeout value set in <see cref="T:System.AppContext"/>, or <see cref="F:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout"/> if none was set.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.Utilities.s_hasTimeout">
            <summary>Whether <see cref="F:System.Text.RegularExpressions.Generated.Utilities.s_defaultTimeout"/> is non-infinite.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Utilities.IndexOfAnyDigit(System.ReadOnlySpan{System.Char})">
            <summary>Finds the next index of any character that matches a Unicode digit.</summary>
        </member>
        <member name="M:System.Text.RegularExpressions.Generated.Utilities.StackPush(System.Int32[]@,System.Int32@,System.Int32,System.Int32)">
            <summary>Pushes 2 values onto the backtracking stack.</summary>
        </member>
        <member name="F:System.Text.RegularExpressions.Generated.Utilities.s_asciiExceptDigits">
            <summary>Supports searching for characters in or not in "\0\u0001\u0002\u0003\u0004\u0005\u0006\a\b\t\n\v\f\r\u000e\u000f\u0010\u0011\u0012\u0013\u0014\u0015\u0016\u0017\u0018\u0019\u001a\u001b\u001c\u001d\u001e\u001f !\"#$%&amp;'()*+,-./:;&lt;=&gt;?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~\u007f".</summary>
        </member>
    </members>
</doc>
