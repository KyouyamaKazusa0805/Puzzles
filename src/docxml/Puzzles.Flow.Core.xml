<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Puzzles.Flow.Core</name>
    </assembly>
    <members>
        <member name="T:Puzzles.Flow.Concepts.CellState">
            <summary>
            Represents a state of cell used.
            </summary>
        </member>
        <member name="F:Puzzles.Flow.Concepts.CellState.Empty">
            <summary>
            Indicates the cell is empty (original name: a "free" cell).
            </summary>
        </member>
        <member name="F:Puzzles.Flow.Concepts.CellState.Path">
            <summary>
            Indicates the cell is used as a path node.
            </summary>
        </member>
        <member name="F:Puzzles.Flow.Concepts.CellState.Start">
            <summary>
            Indicates the cell is used as start cell (original name: an "init" cell).
            </summary>
        </member>
        <member name="F:Puzzles.Flow.Concepts.CellState.End">
            <summary>
            Indicates the cell is used as end cell (original name: a "goal" cell).
            </summary>
        </member>
        <member name="T:Puzzles.Flow.Concepts.FlowPosition">
            <summary>
            Represents a flow, including its start and end position, and its color.
            </summary>
            <param name="StartCoodinate">Indicates the start coordinate.</param>
            <param name="EndCoordinate">Indicates the end coordinate.</param>
            <param name="Color">Indicates the color used.</param>
        </member>
        <member name="M:Puzzles.Flow.Concepts.FlowPosition.#ctor(Puzzles.Concepts.Coordinate,Puzzles.Concepts.Coordinate,System.Byte)">
            <summary>
            Represents a flow, including its start and end position, and its color.
            </summary>
            <param name="StartCoodinate">Indicates the start coordinate.</param>
            <param name="EndCoordinate">Indicates the end coordinate.</param>
            <param name="Color">Indicates the color used.</param>
        </member>
        <member name="P:Puzzles.Flow.Concepts.FlowPosition.StartCoodinate">
            <summary>Indicates the start coordinate.</summary>
        </member>
        <member name="P:Puzzles.Flow.Concepts.FlowPosition.EndCoordinate">
            <summary>Indicates the end coordinate.</summary>
        </member>
        <member name="P:Puzzles.Flow.Concepts.FlowPosition.Color">
            <summary>Indicates the color used.</summary>
        </member>
        <member name="M:Puzzles.Flow.Concepts.FlowPosition.CompareTo(Puzzles.Flow.Concepts.FlowPosition)">
            <inheritdoc/>
        </member>
        <member name="M:Puzzles.Flow.Concepts.FlowPosition.op_GreaterThan(Puzzles.Flow.Concepts.FlowPosition,Puzzles.Flow.Concepts.FlowPosition)">
            <inheritdoc cref="M:System.Numerics.IComparisonOperators`3.op_GreaterThan(`0,`1)"/>
        </member>
        <member name="M:Puzzles.Flow.Concepts.FlowPosition.op_LessThan(Puzzles.Flow.Concepts.FlowPosition,Puzzles.Flow.Concepts.FlowPosition)">
            <inheritdoc cref="M:System.Numerics.IComparisonOperators`3.op_LessThan(`0,`1)"/>
        </member>
        <member name="M:Puzzles.Flow.Concepts.FlowPosition.op_GreaterThanOrEqual(Puzzles.Flow.Concepts.FlowPosition,Puzzles.Flow.Concepts.FlowPosition)">
            <inheritdoc cref="M:System.Numerics.IComparisonOperators`3.op_GreaterThanOrEqual(`0,`1)"/>
        </member>
        <member name="M:Puzzles.Flow.Concepts.FlowPosition.op_LessThanOrEqual(Puzzles.Flow.Concepts.FlowPosition,Puzzles.Flow.Concepts.FlowPosition)">
            <inheritdoc cref="M:System.Numerics.IComparisonOperators`3.op_LessThanOrEqual(`0,`1)"/>
        </member>
        <member name="T:Puzzles.Flow.Concepts.Formatting.GridFormatInfo">
            <summary>
            Represents a format provider for type <see cref="T:Puzzles.Flow.Concepts.Grid"/>.
            </summary>
            <seealso cref="T:Puzzles.Flow.Concepts.Grid"/>
        </member>
        <member name="F:Puzzles.Flow.Concepts.Formatting.GridFormatInfo.EmptyChar">
            <summary>
            Represents empty character.
            </summary>
        </member>
        <member name="F:Puzzles.Flow.Concepts.Formatting.GridFormatInfo.SupportedFlowCharacters">
            <summary>
            Indicates all supported flow characters.
            </summary>
        </member>
        <member name="P:Puzzles.Flow.Concepts.Formatting.GridFormatInfo.FlowCharacters">
            <summary>
            Indicates all supported flow characters.
            </summary>
        </member>
        <member name="M:Puzzles.Flow.Concepts.Formatting.GridFormatInfo.GetFormat(System.Type)">
            <inheritdoc/>
        </member>
        <member name="M:Puzzles.Flow.Concepts.Formatting.GridFormatInfo.FormatCore(Puzzles.Flow.Concepts.Grid)">
            <summary>
            Formats a <see cref="T:Puzzles.Flow.Concepts.Grid"/> into a <see cref="T:System.String"/> value.
            </summary>
            <param name="grid">The grid instance.</param>
            <returns>The formatted string value.</returns>
        </member>
        <member name="M:Puzzles.Flow.Concepts.Formatting.GridFormatInfo.ParseCore(System.String)">
            <summary>
            Parses a <see cref="T:System.String"/> value, converting it into a <see cref="T:Puzzles.Flow.Concepts.Grid"/>.
            </summary>
            <param name="str">The string value to be parsed.</param>
            <returns>The converted <see cref="T:Puzzles.Flow.Concepts.Grid"/> instance.</returns>
            <exception cref="T:System.FormatException">Throws when the parsing operation has encountered an unexpected error.</exception>
            <exception cref="T:System.NotSupportedException">Throws when the parsing operation is not supported.</exception>
        </member>
        <member name="T:Puzzles.Flow.Concepts.Formatting.MultilineGridFormatInfo">
            <summary>
            Represents a multi-line grid format.
            </summary>
        </member>
        <member name="M:Puzzles.Flow.Concepts.Formatting.MultilineGridFormatInfo.FormatCore(Puzzles.Flow.Concepts.Grid)">
            <inheritdoc/>
        </member>
        <member name="M:Puzzles.Flow.Concepts.Formatting.MultilineGridFormatInfo.ParseCore(System.String)">
            <inheritdoc/>
        </member>
        <member name="T:Puzzles.Flow.Concepts.Formatting.StandardGridFormatInfo">
            <summary>
            Represents a format information for stardard rules.
            </summary>
        </member>
        <member name="F:Puzzles.Flow.Concepts.Formatting.StandardGridFormatInfo.SupportedLengths">
            <summary>
            Indicates all supported lengths.
            </summary>
        </member>
        <member name="M:Puzzles.Flow.Concepts.Formatting.StandardGridFormatInfo.FormatCore(Puzzles.Flow.Concepts.Grid)">
            <inheritdoc/>
        </member>
        <member name="M:Puzzles.Flow.Concepts.Formatting.StandardGridFormatInfo.ParseCore(System.String)">
            <inheritdoc/>
        </member>
        <member name="T:Puzzles.Flow.Concepts.Grid">
            <summary>
            Represents a grid that defines the start and end points of flows.
            </summary>
        </member>
        <member name="M:Puzzles.Flow.Concepts.Grid.#ctor(System.Int32,System.Collections.Generic.SortedSet{Puzzles.Flow.Concepts.FlowPosition})">
            <summary>
            Represents a grid that defines the start and end points of flows.
            </summary>
        </member>
        <member name="P:Puzzles.Flow.Concepts.Grid.Length">
            <summary>
            Indicates the number of colors used.
            </summary>
        </member>
        <member name="P:Puzzles.Flow.Concepts.Grid.Min">
            <summary>
            Indicates the minimum flow used.
            </summary>
        </member>
        <member name="P:Puzzles.Flow.Concepts.Grid.Max">
            <summary>
            Indicates the maximum flow used.
            </summary>
        </member>
        <member name="P:Puzzles.Flow.Concepts.Grid.Puzzles#Meta#IBoard#Rows">
            <inheritdoc/>
        </member>
        <member name="P:Puzzles.Flow.Concepts.Grid.Puzzles#Meta#IBoard#Columns">
            <inheritdoc/>
        </member>
        <member name="P:Puzzles.Flow.Concepts.Grid.System#Collections#Generic#IReadOnlyCollection{Puzzles#Flow#Concepts#FlowPosition}#Count">
            <inheritdoc/>
        </member>
        <member name="P:Puzzles.Flow.Concepts.Grid.Puzzles#Meta#DataStructures#IDataStructure#Type">
            <inheritdoc/>
        </member>
        <member name="P:Puzzles.Flow.Concepts.Grid.Puzzles#Meta#DataStructures#IDataStructure#Base">
            <inheritdoc/>
        </member>
        <member name="P:Puzzles.Flow.Concepts.Grid.Item(System.Int32)">
            <summary>
            Gets the flow at the specified index.
            </summary>
            <param name="index">The desired index.</param>
            <returns>The flow.</returns>
            <exception cref="T:System.IndexOutOfRangeException">Throws when the index is out of range.</exception>
        </member>
        <member name="P:Puzzles.Flow.Concepts.Grid.Comparer">
            <summary>
            Indicates the backing comparer to compare equality of field <see cref="F:Puzzles.Flow.Concepts.Grid._cells"/>.
            </summary>
        </member>
        <member name="M:Puzzles.Flow.Concepts.Grid.Equals(Puzzles.Flow.Concepts.Grid)">
            <inheritdoc/>
        </member>
        <member name="M:Puzzles.Flow.Concepts.Grid.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Puzzles.Flow.Concepts.Grid.ToString(System.IFormatProvider)">
            <inheritdoc cref="M:System.IFormattable.ToString(System.String,System.IFormatProvider)"/>
        </member>
        <member name="M:Puzzles.Flow.Concepts.Grid.EnumerateFlows">
            <summary>
            Returns an enumerator object that can iterate on each element of each flow.
            </summary>
            <returns>The flow instances.</returns>
        </member>
        <member name="M:Puzzles.Flow.Concepts.Grid.AsSpan">
            <summary>
            Create a <see cref="T:System.ReadOnlySpan`1"/> to store all flows.
            </summary>
            <returns>A <see cref="T:System.ReadOnlySpan`1"/> instance.</returns>
        </member>
        <member name="M:Puzzles.Flow.Concepts.Grid.Clone">
            <inheritdoc cref="M:System.ICloneable.Clone"/>
        </member>
        <member name="M:Puzzles.Flow.Concepts.Grid.System#ICloneable#Clone">
            <inheritdoc/>
        </member>
        <member name="M:Puzzles.Flow.Concepts.Grid.System#IFormattable#ToString(System.String,System.IFormatProvider)">
            <inheritdoc/>
        </member>
        <member name="M:Puzzles.Flow.Concepts.Grid.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:Puzzles.Flow.Concepts.Grid.System#Collections#Generic#IEnumerable{Puzzles#Flow#Concepts#FlowPosition}#GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:Puzzles.Flow.Concepts.Grid.TryParse(System.String,Puzzles.Flow.Concepts.Grid@)">
            <inheritdoc cref="M:System.IParsable`1.TryParse(System.String,System.IFormatProvider,`0@)"/>
        </member>
        <member name="M:Puzzles.Flow.Concepts.Grid.TryParse(System.String,System.IFormatProvider,Puzzles.Flow.Concepts.Grid@)">
            <inheritdoc/>
        </member>
        <member name="M:Puzzles.Flow.Concepts.Grid.Parse(System.String)">
            <inheritdoc cref="M:System.IParsable`1.Parse(System.String,System.IFormatProvider)"/>
        </member>
        <member name="M:Puzzles.Flow.Concepts.Grid.Parse(System.String,System.IFormatProvider)">
            <inheritdoc/>
        </member>
        <member name="T:Puzzles.Flow.Concepts.Grid.FlowPositionEnumerator">
            <summary>
            Represents an enumerator type that can iterate on each flow cell.
            </summary>
            <param name="_grid">The grid.</param>
        </member>
        <member name="M:Puzzles.Flow.Concepts.Grid.FlowPositionEnumerator.#ctor(Puzzles.Flow.Concepts.Grid)">
            <summary>
            Represents an enumerator type that can iterate on each flow cell.
            </summary>
            <param name="_grid">The grid.</param>
        </member>
        <member name="F:Puzzles.Flow.Concepts.Grid.FlowPositionEnumerator._enumerator">
            <summary>
            Indicates the backing enumerator.
            </summary>
        </member>
        <member name="P:Puzzles.Flow.Concepts.Grid.FlowPositionEnumerator.Current">
            <inheritdoc/>
        </member>
        <member name="P:Puzzles.Flow.Concepts.Grid.FlowPositionEnumerator.System#Collections#IEnumerator#Current">
            <inheritdoc/>
        </member>
        <member name="M:Puzzles.Flow.Concepts.Grid.FlowPositionEnumerator.GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:Puzzles.Flow.Concepts.Grid.FlowPositionEnumerator.MoveNext">
            <inheritdoc/>
        </member>
        <member name="M:Puzzles.Flow.Concepts.Grid.FlowPositionEnumerator.System#Collections#IEnumerator#Reset">
            <inheritdoc/>
        </member>
        <member name="M:Puzzles.Flow.Concepts.Grid.FlowPositionEnumerator.System#IDisposable#Dispose">
            <inheritdoc/>
        </member>
        <member name="M:Puzzles.Flow.Concepts.Grid.FlowPositionEnumerator.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:Puzzles.Flow.Concepts.Grid.FlowPositionEnumerator.System#Collections#Generic#IEnumerable{Puzzles#Flow#Concepts#FlowPosition}#GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="F:Puzzles.Flow.Concepts.Grid._cells">
            <summary>
            The generated field declaration for parameter <c>cells</c>.
            </summary>
        </member>
        <member name="P:Puzzles.Flow.Concepts.Grid.Size">
            <summary>
            The generated property declaration for parameter <c>size</c>.
            </summary>
        </member>
        <member name="M:Puzzles.Flow.Concepts.Grid.Equals(System.Object)">
            <inheritdoc cref="M:System.Object.Equals(System.Object)"/>
        </member>
        <member name="M:Puzzles.Flow.Concepts.Grid.ToString">
            <inheritdoc cref="M:System.Object.ToString"/>
        </member>
        <member name="M:Puzzles.Flow.Concepts.Grid.op_Equality(Puzzles.Flow.Concepts.Grid,Puzzles.Flow.Concepts.Grid)">
            <inheritdoc cref="M:System.Numerics.IEqualityOperators`3.op_Equality(`0,`1)"/>
        </member>
        <member name="M:Puzzles.Flow.Concepts.Grid.op_Inequality(Puzzles.Flow.Concepts.Grid,Puzzles.Flow.Concepts.Grid)">
            <inheritdoc cref="M:System.Numerics.IEqualityOperators`3.op_Inequality(`0,`1)"/>
        </member>
        <member name="T:Puzzles.Flow.Concepts.Path">
            <summary>
            Represents a path of a flow.
            </summary>
            <param name="flow">Indicates the flow.</param>
            <param name="coordinates">Indiactes the coordinates used as path.</param>
        </member>
        <member name="M:Puzzles.Flow.Concepts.Path.#ctor(Puzzles.Flow.Concepts.FlowPosition,Puzzles.Concepts.Coordinate[])">
            <summary>
            Represents a path of a flow.
            </summary>
            <param name="flow">Indicates the flow.</param>
            <param name="coordinates">Indiactes the coordinates used as path.</param>
        </member>
        <member name="P:Puzzles.Flow.Concepts.Path.Length">
            <summary>
            Indicates the cells used.
            </summary>
        </member>
        <member name="P:Puzzles.Flow.Concepts.Path.Coordinates">
            <summary>
            Indicates the cells used.
            </summary>
        </member>
        <member name="P:Puzzles.Flow.Concepts.Path.Directions">
            <summary>
            Indicates the directions used.
            </summary>
        </member>
        <member name="P:Puzzles.Flow.Concepts.Path.System#Collections#Generic#IReadOnlyCollection{Puzzles#Concepts#Coordinate}#Count">
            <inheritdoc/>
        </member>
        <member name="P:Puzzles.Flow.Concepts.Path.Item(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:Puzzles.Flow.Concepts.Path.Overlaps(Puzzles.Flow.Concepts.Path)">
            <summary>
            Check whether two <see cref="T:Puzzles.Flow.Concepts.Path"/> overlap with each other.
            </summary>
            <param name="other">The other instance to be checked.</param>
            <returns>A <see cref="T:System.Boolean"/> result indicating that.</returns>
        </member>
        <member name="M:Puzzles.Flow.Concepts.Path.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Puzzles.Flow.Concepts.Path.ToString">
            <inheritdoc/>
        </member>
        <member name="M:Puzzles.Flow.Concepts.Path.GetEnumerator">
            <inheritdoc cref="M:System.Collections.Generic.IEnumerable`1.GetEnumerator"/>
        </member>
        <member name="M:Puzzles.Flow.Concepts.Path.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:Puzzles.Flow.Concepts.Path.System#Collections#Generic#IEnumerable{Puzzles#Concepts#Coordinate}#GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="F:Puzzles.Flow.Concepts.Path._coordinates">
            <summary>
            The generated field declaration for parameter <c>coordinates</c>.
            </summary>
        </member>
        <member name="P:Puzzles.Flow.Concepts.Path.Flow">
            <summary>
            The generated property declaration for parameter <c>flow</c>.
            </summary>
        </member>
        <member name="M:Puzzles.Flow.Concepts.Path.Equals(System.Object)">
            <inheritdoc cref="M:System.Object.Equals(System.Object)"/>
        </member>
        <member name="M:Puzzles.Flow.Concepts.Path.op_Equality(Puzzles.Flow.Concepts.Path,Puzzles.Flow.Concepts.Path)">
            <inheritdoc cref="M:System.Numerics.IEqualityOperators`3.op_Equality(`0,`1)"/>
        </member>
        <member name="M:Puzzles.Flow.Concepts.Path.op_Inequality(Puzzles.Flow.Concepts.Path,Puzzles.Flow.Concepts.Path)">
            <inheritdoc cref="M:System.Numerics.IEqualityOperators`3.op_Inequality(`0,`1)"/>
        </member>
        <member name="M:Puzzles.Flow.Concepts.Path.Equals(Puzzles.Flow.Concepts.Path)">
            <inheritdoc/>
        </member>
    </members>
</doc>
