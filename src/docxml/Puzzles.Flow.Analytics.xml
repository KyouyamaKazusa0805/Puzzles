<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Puzzles.Flow.Analytics</name>
    </assembly>
    <members>
        <member name="T:Puzzles.Flow.Analytics.Analyzer">
            <summary>
            Represents an analyzer.
            </summary>
        </member>
        <member name="P:Puzzles.Flow.Analytics.Analyzer.CheckTouchness">
            <summary>
            Indicates whether analyzer will check on touchness.
            </summary>
        </member>
        <member name="P:Puzzles.Flow.Analytics.Analyzer.CheckStrandedCases">
            <summary>
            Indicates whether analyzer will check on stranded cases.
            </summary>
        </member>
        <member name="P:Puzzles.Flow.Analytics.Analyzer.CheckDeadendCases">
            <summary>
            Indicates whether analyzer will check on deadend cases.
            </summary>
        </member>
        <member name="P:Puzzles.Flow.Analytics.Analyzer.SearchOutsideIn">
            <summary>
            Indicates whether analyzer will search for outside-in cases.
            </summary>
        </member>
        <member name="P:Puzzles.Flow.Analytics.Analyzer.SearchFastForward">
            <summary>
            Indicates whether analyzer will search fast forwardly.
            </summary>
        </member>
        <member name="P:Puzzles.Flow.Analytics.Analyzer.PenalizeExploration">
            <summary>
            Indicates whether analyzer will explore penalized cases.
            </summary>
        </member>
        <member name="P:Puzzles.Flow.Analytics.Analyzer.ReorderColors">
            <summary>
            Indicates whether analyzer will automatically adjust colors in searching experience.
            </summary>
        </member>
        <member name="P:Puzzles.Flow.Analytics.Analyzer.ReorderOnMostConstrained">
            <summary>
            Indicates whether analyzer will automatically adjust colors via constrainted priority.
            </summary>
        </member>
        <member name="P:Puzzles.Flow.Analytics.Analyzer.ForcesFirstColor">
            <summary>
            Indicates whether analyzer will force the first color as start.
            </summary>
        </member>
        <member name="P:Puzzles.Flow.Analytics.Analyzer.RandomOrdering">
            <summary>
            Indicates whether analyzer will randomize colors.
            </summary>
        </member>
        <member name="P:Puzzles.Flow.Analytics.Analyzer.UsesBestFirstSearch">
            <summary>
            Indicates whether analyzer will use best-first search (BFS) rule to check grid.
            </summary>
        </member>
        <member name="P:Puzzles.Flow.Analytics.Analyzer.MaxMemoryUsage">
            <summary>
            Indicates the maximum memory usage in mega-bytes.
            </summary>
        </member>
        <member name="P:Puzzles.Flow.Analytics.Analyzer.BottleneckLimit">
            <summary>
            Indicates the number of bottleneck limit.
            </summary>
        </member>
        <member name="P:Puzzles.Flow.Analytics.Analyzer.MaxNodes">
            <summary>
            Indicates the number of maximum nodes can be reached.
            </summary>
        </member>
        <member name="P:Puzzles.Flow.Analytics.Analyzer.QueueCreator">
            <summary>
            Indicates the queue creator method.
            </summary>
        </member>
        <member name="P:Puzzles.Flow.Analytics.Analyzer.QueueEnqueuer">
            <summary>
            Indicates the queue enqueuer method.
            </summary>
        </member>
        <member name="P:Puzzles.Flow.Analytics.Analyzer.QueueDequeuer">
            <summary>
            Indicates the queue dequeuer method.
            </summary>
        </member>
        <member name="P:Puzzles.Flow.Analytics.Analyzer.QueueDestroyer">
            <summary>
            Indicatees the queue destroyer method.
            </summary>
        </member>
        <member name="P:Puzzles.Flow.Analytics.Analyzer.QueueClearer">
            <summary>
            Indicates the queue clearer method.
            </summary>
        </member>
        <member name="P:Puzzles.Flow.Analytics.Analyzer.QueuePeeker">
            <summary>
            Indicates thee queue peeker method.
            </summary>
        </member>
        <member name="M:Puzzles.Flow.Analytics.Analyzer.TryLoadPuzzle(System.String,Puzzles.Flow.Concepts.Grid@,Puzzles.Flow.Analytics.ProcessState@)">
            <summary>
            Try to load a puzzle via its string representation, and return its bound grid data structure and state.
            </summary>
            <param name="gridString">The grid string.</param>
            <param name="grid">The grid.</param>
            <param name="state">The state.</param>
            <returns>A <see cref="T:System.Boolean"/> result indicating whether the loading operation is successful.</returns>
        </member>
        <member name="M:Puzzles.Flow.Analytics.Analyzer.AddColor(Puzzles.Flow.Concepts.Grid@,Puzzles.Flow.Analytics.ProcessState@,System.Span{System.Byte},System.Byte,System.Int16,System.Span{System.Int16})">
            <summary>
            Add the current color bit flag to the regions adjacent to the current or goal position.
            </summary>
            <param name="grid">The grid.</param>
            <param name="state">The state.</param>
            <param name="resultMap">The result map.</param>
            <param name="pos">The position.</param>
            <param name="cFlag">The flag.</param>
            <param name="resultFlags">The result flags.</param>
        </member>
        <member name="M:Puzzles.Flow.Analytics.Analyzer.PrintRegions(Puzzles.Flow.Concepts.Grid@,Puzzles.Flow.Analytics.ProcessState@,System.ReadOnlySpan{System.Byte},System.IO.TextWriter)">
            <summary>
            Print regions.
            </summary>
            <param name="grid">The grid.</param>
            <param name="state">The state.</param>
            <param name="resultMap">The result map.</param>
            <param name="writer">The writer.</param>
        </member>
        <member name="M:Puzzles.Flow.Analytics.Analyzer.OrderColors(Puzzles.Flow.Concepts.Grid@,Puzzles.Flow.Analytics.ProcessState@,System.String)">
            <summary>
            Order colors.
            </summary>
            <param name="grid">The grid.</param>
            <param name="state">The state.</param>
            <param name="userOrder">User order.</param>
        </member>
        <member name="M:Puzzles.Flow.Analytics.Analyzer.CanMove(Puzzles.Flow.Analytics.ProcessState@,Puzzles.Flow.Concepts.Grid@,System.Int32,Puzzles.Flow.Concepts.Primitives.Direction)">
            <summary>
            Determine whether the current grid can move.
            </summary>
            <param name="state">The current state.</param>
            <param name="grid">The grid.</param>
            <param name="color">The color.</param>
            <param name="direction">The direction.</param>
            <returns>A <see cref="T:System.Boolean"/> result indicating that.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Throws when the argument <paramref name="grid"/> or <paramref name="color"/> is invalid.
            </exception>
        </member>
        <member name="M:Puzzles.Flow.Analytics.Analyzer.IsDeadend(Puzzles.Flow.Concepts.Grid@,Puzzles.Flow.Analytics.ProcessState@,System.Byte)">
            <summary>
            Indicates the current position is deadend.
            </summary>
            <param name="grid">The grid.</param>
            <param name="state">The state.</param>
            <param name="pos">The position.</param>
            <returns>A <see cref="T:System.Boolean"/> result indicating that.</returns>
        </member>
        <member name="M:Puzzles.Flow.Analytics.Analyzer.CheckDeadends(Puzzles.Flow.Concepts.Grid@,Puzzles.Flow.Analytics.ProcessState@)">
            <summary>
            Check for deadend regions of free-space where there is no way to put an active path into and out of it.
            Any free-space node which has only one free neighbor represents such a deadend.
            For the purposes of this check, current and goal positions coutn as "free".
            </summary>
            <param name="grid">The grid.</param>
            <param name="state">The state.</param>
            <returns>A <see cref="T:System.Boolean"/> result.</returns>
        </member>
        <member name="M:Puzzles.Flow.Analytics.Analyzer.IsForced(Puzzles.Flow.Concepts.Grid@,Puzzles.Flow.Analytics.ProcessState@,System.Byte,System.Byte)">
            <summary>
            Determine whether the puzzle is forced.
            </summary>
            <param name="grid">The grid.</param>
            <param name="state">The state.</param>
            <param name="color">The color.</param>
            <param name="pos">The position.</param>
            <returns>A <see cref="T:System.Boolean"/> result.</returns>
        </member>
        <member name="M:Puzzles.Flow.Analytics.Analyzer.FindForced(Puzzles.Flow.Concepts.Grid@,Puzzles.Flow.Analytics.ProcessState@,System.Int32@,Puzzles.Flow.Concepts.Primitives.Direction@)">
            <summary>
            Find a forced color.
            </summary>
            <param name="grid">The grid.</param>
            <param name="state">The state.</param>
            <param name="forcedColor">The forced color.</param>
            <param name="forcedDirection">The forced direction.</param>
            <returns>A <see cref="T:System.Boolean"/> result.</returns>
        </member>
        <member name="M:Puzzles.Flow.Analytics.Analyzer.BuildRegions(Puzzles.Flow.Concepts.Grid@,Puzzles.Flow.Analytics.ProcessState@,System.Span{System.Byte})">
            <summary>
            <para>Perform connected components analysis on game board.</para>
            <para>
            This is a 2-pass operation: one to build and merge the disjoint-set data structures,
            and another to re-index them so each unique region of free space gets its own index, starting at zero.
            Returns the number of freespace regions.
            </para>
            </summary>
            <param name="grid">The grid.</param>
            <param name="state">The state.</param>
            <param name="resultMap">The map.</param>
            <returns>The regions.</returns>
        </member>
        <member name="M:Puzzles.Flow.Analytics.Analyzer.GetNextMoveColor(Puzzles.Flow.Concepts.Grid@,Puzzles.Flow.Analytics.ProcessState@)">
            <summary>
            Pick the next color to move deterministically.
            </summary>
            <param name="grid">The grid.</param>
            <param name="state">The state.</param>
            <returns>The next color chosen.</returns>
        </member>
        <member name="M:Puzzles.Flow.Analytics.Analyzer.MakeMove(Puzzles.Flow.Concepts.Grid@,Puzzles.Flow.Analytics.ProcessState@,System.Byte,Puzzles.Flow.Concepts.Primitives.Direction,System.Boolean)">
            <summary>
            Make a valid move.
            </summary>
            <param name="grid">The grid.</param>
            <param name="state">The state.</param>
            <param name="color">The color.</param>
            <param name="direction">The direction.</param>
            <param name="forced">Indicates whether the move is forced.</param>
            <returns>A <see cref="T:System.Double"/> result.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Throws when the <paramref name="color"/> specified is exceeded the limit.
            </exception>
        </member>
        <member name="M:Puzzles.Flow.Analytics.Analyzer.GetFreedCoordinatesCount(Puzzles.Flow.Concepts.Grid@,Puzzles.Flow.Analytics.ProcessState@,System.Int32,System.Int32)">
            <summary>
            Get the number of freed spaces around coordinate x and y.
            </summary>
            <param name="grid">The grid.</param>
            <param name="state">The state.</param>
            <param name="x">The x coordinate value.</param>
            <param name="y">The y coordinate value.</param>
            <returns>An <see cref="T:System.Int32"/> value indicating the number.</returns>
        </member>
        <member name="M:Puzzles.Flow.Analytics.Analyzer.GetFreedCoordinatesCount(Puzzles.Flow.Concepts.Grid@,Puzzles.Flow.Analytics.ProcessState@,System.Byte)">
            <summary>
            Get the number of freed spaces around coordinate x and y.
            </summary>
            <param name="grid">The grid.</param>
            <param name="state">The state.</param>
            <param name="position">The position.</param>
            <returns>An <see cref="T:System.Int32"/> value indicating the number.</returns>
        </member>
        <member name="M:Puzzles.Flow.Analytics.Analyzer.GetStrandedColors(Puzzles.Flow.Concepts.Grid@,Puzzles.Flow.Analytics.ProcessState@,System.Int32,System.Span{System.Byte},System.Int32,System.Int32)">
            <summary>
            Check the results of the connected-component analysis to make sure that
            every color can get solved and no free-space is isolated.
            </summary>
            <param name="grid">The grid.</param>
            <param name="state">The state.</param>
            <param name="resultCount">The result count.</param>
            <param name="resultMap">The result map.</param>
            <param name="chokePointColor">The choke point color.</param>
            <param name="maxStranded">The maximum stranded.</param>
            <returns>The mask of colors stranded.</returns>
        </member>
        <member name="T:Puzzles.Flow.Analytics.ColorFeature">
            <summary>
            Represents a type that is used for sorting colors if <see cref="P:Puzzles.Flow.Analytics.Analyzer.ReorderColors"/> is set <see langword="true"/>.
            </summary>
            <seealso cref="P:Puzzles.Flow.Analytics.Analyzer.ReorderColors"/>
        </member>
        <member name="F:Puzzles.Flow.Analytics.ColorFeature.Index">
            <summary>
            Indicates the index reordered.
            </summary>
        </member>
        <member name="F:Puzzles.Flow.Analytics.ColorFeature.UserIndex">
            <summary>
            Indicates the index which is user-specified.
            </summary>
        </member>
        <member name="F:Puzzles.Flow.Analytics.ColorFeature.MinDistance">
            <summary>
            Indicates the minimal distance.
            </summary>
        </member>
        <member name="F:Puzzles.Flow.Analytics.ColorFeature.WallDistance">
            <summary>
            Indicates the wall distance.
            </summary>
        </member>
        <member name="M:Puzzles.Flow.Analytics.ColorFeature.Equals(Puzzles.Flow.Analytics.ColorFeature@)">
            <inheritdoc cref="M:System.IEquatable`1.Equals(`0)"/>
        </member>
        <member name="M:Puzzles.Flow.Analytics.ColorFeature.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:Puzzles.Flow.Analytics.ColorFeature.CompareTo(Puzzles.Flow.Analytics.ColorFeature@)">
            <inheritdoc cref="M:System.IComparable`1.CompareTo(`0)"/>
        </member>
        <member name="M:Puzzles.Flow.Analytics.ColorFeature.System#IEquatable{Puzzles#Flow#Analytics#ColorFeature}#Equals(Puzzles.Flow.Analytics.ColorFeature)">
            <inheritdoc/>
        </member>
        <member name="M:Puzzles.Flow.Analytics.ColorFeature.System#IComparable{Puzzles#Flow#Analytics#ColorFeature}#CompareTo(Puzzles.Flow.Analytics.ColorFeature)">
            <inheritdoc/>
        </member>
        <member name="M:Puzzles.Flow.Analytics.ColorFeature.Compare(Puzzles.Flow.Analytics.ColorFeature,Puzzles.Flow.Analytics.ColorFeature)">
            <summary>
            Compares two <see cref="T:Puzzles.Flow.Analytics.ColorFeature"/> instances.
            </summary>
            <param name="left">The first element to be compared.</param>
            <param name="right">The second element to be compared.</param>
            <returns>An <see cref="T:System.Int32"/> indicating the result.</returns>
        </member>
        <member name="M:Puzzles.Flow.Analytics.ColorFeature.Equals(System.Object)">
            <inheritdoc cref="M:System.Object.Equals(System.Object)"/>
        </member>
        <member name="M:Puzzles.Flow.Analytics.ColorFeature.op_Equality(Puzzles.Flow.Analytics.ColorFeature@,Puzzles.Flow.Analytics.ColorFeature@)">
            <inheritdoc cref="M:System.Numerics.IEqualityOperators`3.op_Equality(`0,`1)"/>
        </member>
        <member name="M:Puzzles.Flow.Analytics.ColorFeature.op_Inequality(Puzzles.Flow.Analytics.ColorFeature@,Puzzles.Flow.Analytics.ColorFeature@)">
            <inheritdoc cref="M:System.Numerics.IEqualityOperators`3.op_Inequality(`0,`1)"/>
        </member>
        <member name="M:Puzzles.Flow.Analytics.ColorFeature.System#Numerics#IEqualityOperators{Puzzles#Flow#Analytics#ColorFeature,Puzzles#Flow#Analytics#ColorFeature,System#Boolean}#op_Equality(Puzzles.Flow.Analytics.ColorFeature,Puzzles.Flow.Analytics.ColorFeature)">
            <inheritdoc/>
        </member>
        <member name="M:Puzzles.Flow.Analytics.ColorFeature.System#Numerics#IEqualityOperators{Puzzles#Flow#Analytics#ColorFeature,Puzzles#Flow#Analytics#ColorFeature,System#Boolean}#op_Inequality(Puzzles.Flow.Analytics.ColorFeature,Puzzles.Flow.Analytics.ColorFeature)">
            <inheritdoc/>
        </member>
        <member name="M:Puzzles.Flow.Analytics.ColorFeature.op_GreaterThan(Puzzles.Flow.Analytics.ColorFeature@,Puzzles.Flow.Analytics.ColorFeature@)">
            <inheritdoc cref="M:System.Numerics.IComparisonOperators`3.op_GreaterThan(`0,`1)"/>
        </member>
        <member name="M:Puzzles.Flow.Analytics.ColorFeature.op_LessThan(Puzzles.Flow.Analytics.ColorFeature@,Puzzles.Flow.Analytics.ColorFeature@)">
            <inheritdoc cref="M:System.Numerics.IComparisonOperators`3.op_LessThan(`0,`1)"/>
        </member>
        <member name="M:Puzzles.Flow.Analytics.ColorFeature.op_GreaterThanOrEqual(Puzzles.Flow.Analytics.ColorFeature@,Puzzles.Flow.Analytics.ColorFeature@)">
            <inheritdoc cref="M:System.Numerics.IComparisonOperators`3.op_GreaterThanOrEqual(`0,`1)"/>
        </member>
        <member name="M:Puzzles.Flow.Analytics.ColorFeature.op_LessThanOrEqual(Puzzles.Flow.Analytics.ColorFeature@,Puzzles.Flow.Analytics.ColorFeature@)">
            <inheritdoc cref="M:System.Numerics.IComparisonOperators`3.op_LessThanOrEqual(`0,`1)"/>
        </member>
        <member name="M:Puzzles.Flow.Analytics.ColorFeature.System#Numerics#IComparisonOperators{Puzzles#Flow#Analytics#ColorFeature,Puzzles#Flow#Analytics#ColorFeature,System#Boolean}#op_GreaterThan(Puzzles.Flow.Analytics.ColorFeature,Puzzles.Flow.Analytics.ColorFeature)">
            <inheritdoc/>
        </member>
        <member name="M:Puzzles.Flow.Analytics.ColorFeature.System#Numerics#IComparisonOperators{Puzzles#Flow#Analytics#ColorFeature,Puzzles#Flow#Analytics#ColorFeature,System#Boolean}#op_LessThan(Puzzles.Flow.Analytics.ColorFeature,Puzzles.Flow.Analytics.ColorFeature)">
            <inheritdoc/>
        </member>
        <member name="M:Puzzles.Flow.Analytics.ColorFeature.System#Numerics#IComparisonOperators{Puzzles#Flow#Analytics#ColorFeature,Puzzles#Flow#Analytics#ColorFeature,System#Boolean}#op_LessThanOrEqual(Puzzles.Flow.Analytics.ColorFeature,Puzzles.Flow.Analytics.ColorFeature)">
            <inheritdoc/>
        </member>
        <member name="T:Puzzles.Flow.Analytics.FifoBasedQueue">
            <summary>
            Indicates the data structure for FIFO-based priority queue.
            </summary>
        </member>
        <member name="F:Puzzles.Flow.Analytics.FifoBasedQueue.Count">
            <summary>
            Indicates the number enqueued.
            </summary>
        </member>
        <member name="F:Puzzles.Flow.Analytics.FifoBasedQueue.Capacity">
            <summary>
            Indicates the maximum allowable queue size.
            </summary>
        </member>
        <member name="F:Puzzles.Flow.Analytics.FifoBasedQueue.Next">
            <summary>
            Indicates the next index to dequeue.
            </summary>
        </member>
        <member name="F:Puzzles.Flow.Analytics.FifoBasedQueue.Start">
            <summary>
            Indicates the array of nodes.
            </summary>
        </member>
        <member name="T:Puzzles.Flow.Analytics.HeapBasedQueue">
            <summary>
            Indicates the data structure for heap-based priority queue.
            </summary>
        </member>
        <member name="F:Puzzles.Flow.Analytics.HeapBasedQueue.Count">
            <summary>
            Indicates the number enqueued.
            </summary>
        </member>
        <member name="F:Puzzles.Flow.Analytics.HeapBasedQueue.Capacity">
            <summary>
            Indicates the maximum allowable queue size.
            </summary>
        </member>
        <member name="F:Puzzles.Flow.Analytics.HeapBasedQueue.Start">
            <summary>
            Indicates the array of nodes.
            </summary>
        </member>
        <member name="T:Puzzles.Flow.Analytics.NodeStorage">
            <summary>
            Represents data structure for node storage.
            </summary>
        </member>
        <member name="F:Puzzles.Flow.Analytics.NodeStorage.Capacity">
            <summary>
            Indicates the capacity.
            </summary>
        </member>
        <member name="F:Puzzles.Flow.Analytics.NodeStorage.Count">
            <summary>
            Indicates the number of nodes solved.
            </summary>
        </member>
        <member name="F:Puzzles.Flow.Analytics.NodeStorage.Start">
            <summary>
            Indicates the allocated block.
            </summary>
        </member>
        <member name="T:Puzzles.Flow.Analytics.ProcessState">
            <summary>
            Represents a process state.
            </summary>
        </member>
        <member name="F:Puzzles.Flow.Analytics.ProcessState.Cells">
            <summary>
            Indicates the cell states.
            </summary>
        </member>
        <member name="F:Puzzles.Flow.Analytics.ProcessState.Positions">
            <summary>
            Indicates the positions.
            </summary>
        </member>
        <member name="P:Puzzles.Flow.Analytics.ProcessState.FreedCellsCount">
            <summary>
            Indicates the number of freed cells.
            </summary>
        </member>
        <member name="P:Puzzles.Flow.Analytics.ProcessState.LastColor">
            <summary>
            Indicates the last color.
            </summary>
        </member>
        <member name="P:Puzzles.Flow.Analytics.ProcessState.CompletedMask">
            <summary>
            Indicates the bit flags indicating whether each color has been completed or not
            (<c>currentPosition</c> is adjacent to <c>goalPosition</c>).
            </summary>
        </member>
        <member name="M:Puzzles.Flow.Analytics.ProcessState.Print(Puzzles.Flow.Concepts.Grid@,Puzzles.Flow.Analytics.ProcessState@,System.IO.TextWriter)">
            <summary>
            Print the grid to the specified stream.
            </summary>
            <param name="grid">The grid.</param>
            <param name="state">The state.</param>
            <param name="writer">The writer.</param>
        </member>
        <member name="T:Puzzles.Flow.Analytics.Queue">
            <summary>
            Represents a local queue union type.
            </summary>
        </member>
        <member name="F:Puzzles.Flow.Analytics.Queue.HeapBased">
            <summary>
            Indicates the heap-based value.
            </summary>
        </member>
        <member name="F:Puzzles.Flow.Analytics.Queue.FifoBased">
            <summary>
            Indicates the FIFO-based value.
            </summary>
        </member>
        <member name="T:Puzzles.Flow.Analytics.Region">
            <summary>
            Indicates disjointed set data structure for connected component analysis of free spaces (see region_ functions).
            </summary>
            <param name="Parent">Indicates the parent index.</param>
            <param name="Rank">Indicates rank (see Wikipedia article).</param>
        </member>
        <member name="M:Puzzles.Flow.Analytics.Region.#ctor(System.Byte,System.Byte)">
            <summary>
            Indicates disjointed set data structure for connected component analysis of free spaces (see region_ functions).
            </summary>
            <param name="Parent">Indicates the parent index.</param>
            <param name="Rank">Indicates rank (see Wikipedia article).</param>
        </member>
        <member name="P:Puzzles.Flow.Analytics.Region.Parent">
            <summary>Indicates the parent index.</summary>
        </member>
        <member name="P:Puzzles.Flow.Analytics.Region.Rank">
            <summary>Indicates rank (see Wikipedia article).</summary>
        </member>
        <member name="M:Puzzles.Flow.Analytics.Region.Unite(System.Span{Puzzles.Flow.Analytics.Region},System.Byte,System.Byte)">
            <summary>
            Merge two regions.
            </summary>
            <param name="regions">The regions.</param>
            <param name="a">The first position.</param>
            <param name="b">The second position.</param>
            <returns>The merged result.</returns>
        </member>
        <member name="M:Puzzles.Flow.Analytics.Region.Find(System.Span{Puzzles.Flow.Analytics.Region},System.Byte)">
            <summary>
            Find for the position from the given index <paramref name="p"/>.
            </summary>
            <param name="regions">The regions.</param>
            <param name="p">The index.</param>
            <returns>The position.</returns>
        </member>
        <member name="M:Puzzles.Flow.Analytics.Region.Create(System.Byte)">
            <summary>
            Create a <see cref="T:Puzzles.Flow.Analytics.Region"/> instance via the specified position.
            </summary>
            <param name="position">The position.</param>
            <returns>The <see cref="T:Puzzles.Flow.Analytics.Region"/> instance created.</returns>
        </member>
        <member name="T:Puzzles.Flow.Analytics.TreeNode">
            <summary>
            Represents a node in searching on A* or BFS algorithm.
            </summary>
        </member>
        <member name="F:Puzzles.Flow.Analytics.TreeNode.CostToCome">
            <summary>
            Indicates the cost to come (this field will be ignored in BFS).
            </summary>
        </member>
        <member name="F:Puzzles.Flow.Analytics.TreeNode.CostToGo">
            <summary>
            Indicates the cost to go (this field will be ignored in BFS).
            </summary>
        </member>
        <member name="F:Puzzles.Flow.Analytics.TreeNode.State">
            <summary>
            Indicates the current progress state.
            </summary>
        </member>
        <member name="F:Puzzles.Flow.Analytics.TreeNode.Parent">
            <summary>
            Indicates the parent of this node (can also be <see langword="null"/>).
            </summary>
        </member>
    </members>
</doc>
